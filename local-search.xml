<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在SpringBoot中设置统一结果返回格式</title>
    <link href="/2025/07/22/%E5%9C%A8SpringBoot%E4%B8%AD%E8%AE%BE%E7%BD%AE%E7%BB%9F%E4%B8%80%E7%BB%93%E6%9E%9C%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F/"/>
    <url>/2025/07/22/%E5%9C%A8SpringBoot%E4%B8%AD%E8%AE%BE%E7%BD%AE%E7%BB%9F%E4%B8%80%E7%BB%93%E6%9E%9C%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>在前后端分离的项目中后端返回的格式一定要友好，不然会对前端的开发人员带来很多的工作量。本文介绍了在SpringBoot中做到统一后端返回格式的方法。<span id="more"></span></p><h2id="一编写响应状态枚举类responseenum">一、编写响应状态枚举类<code>ResponseEnum</code></h2><p>根据http协议以及实际业务中的常用响应状态，设计一个枚举类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> Enum ResponseEnum &#123;<br>    SUCCESS(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;OK&quot;</span>),<br>VALIDATE_FAILED(<span class="hljs-number">4001</span>, <span class="hljs-string">&quot;validation failure&quot;</span>),<br>    FORBIDDEN(<span class="hljs-number">4003</span>, <span class="hljs-string">&quot;no access&quot;</span>)<br>    NOT_FOUND(<span class="hljs-number">404</span>, <span class="hljs-string">&quot;no such resource&quot;</span>),<br>    COMMON_FAILED(<span class="hljs-number">5000</span>, <span class="hljs-string">&quot;server error&quot;</span>);<br>    <br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <br>    ResponseEnum(Integer code, String message) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2id="二编写响应封装类responset">二、编写响应封装类<code>Response&lt;T&gt;</code></h2><p>编写一个封装类，用于把响应数据封装成统一的格式，其包含状态码、响应信息、响应数据、时间戳等基本内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@NoArgsConstructor</span> <span class="hljs-comment">// 必须提供公有的无参构造器，用于Feign远程调用的自动构建实例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Response</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> T data;<br>    <span class="hljs-keyword">private</span> Long timestamp;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 私有有参构造方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 响应信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 响应数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Response</span><span class="hljs-params">(Integer code, String message, T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.timestamp = System.currentTimeMillis();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 私有build方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status 响应状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 响应数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回封装有数据的响应体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; 封装的数据的类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T&gt; Response&lt;T&gt; <span class="hljs-title function_">build</span><span class="hljs-params">(ResponseEnum status, T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>&lt;&gt;(status.getCode(), status.getMessage(), data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 私有build方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 响应信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 响应数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回封装有数据的响应体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; 封装的数据的类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T&gt; Response&lt;T&gt; <span class="hljs-title function_">build</span><span class="hljs-params">(Integer code, String message, T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>&lt;&gt;(code, message, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 公有静态工厂方法，处理请求成功</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 响应数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回封装有数据的响应体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; 封装的数据的类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Response&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> build(ResponseEnum.SUCCESS, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 公有静态工厂方法，处理请求失败</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 响应消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回不带有数据的响应体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Response&lt;?&gt; fail(Integer code, String message) &#123;<br>        <span class="hljs-keyword">return</span> build(code, message, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 公有静态工厂方法，处理请求失败</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status 响应状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回不带有数据的响应体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Response&lt;?&gt; fail(ResponseEnum status) &#123;<br>        <span class="hljs-keyword">return</span> build(status, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 公有静态工厂方法，处理请求失败并且修改响应信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status 响应状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 自定义响应信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回不带有数据的响应体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Response&lt;?&gt; fail(ResponseEnum status, String message) &#123;<br>        <span class="hljs-keyword">return</span> build(status.getCode(), message, <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三自定义业务异常类">三、自定义业务异常类</h2><p>自定义一个异常类，用于表示业务中的各种异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BusinessException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer code;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String message;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessException</span><span class="hljs-params">(ResponseEnum status)</span> &#123;<br>        <span class="hljs-built_in">super</span>(status.getMessage());<br>        <span class="hljs-built_in">this</span>.code = status.getCode();<br>        <span class="hljs-built_in">this</span>.message = status.getMessage();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> message; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2id="四编写全局异常处理器globalexceptionhandler">四、编写全局异常处理器<code>GlobalExceptionHandler</code></h2><p>使用<code>@RestControllerAdvice</code>注解和<code>@ExceptionHandler</code>注解，编写异常处理逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对于业务异常，调用Response.fail()逻辑，并且根据异常信息返回具体状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex 业务异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回封装响应体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(BusinessException.class)</span><br>    <span class="hljs-keyword">public</span> Response&lt;?&gt; handleBusinessException(BusinessException ex) &#123;<br>        <span class="hljs-keyword">return</span> Response.fail(ex.getCode(), ex.getMessage());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对于一般异常，打印异常日志，调用Response.fail()逻辑并指定为COMMON_FAILED</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex 一般异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回封装响应体</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> Response&lt;?&gt; handleGenericException(Exception ex) &#123;<br>        System.err.println(ex.getMessage());<br>        <span class="hljs-keyword">return</span> Response.fail(ResponseEnum.COMMON_FAILED);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五编写配置类">五、编写配置类</h2><p>对于微服务场景，由于编写的全局异常处理器往往位于单独的<code>common</code>模块中，与一般的微服务模块的启动类不在同一个包中，所以微服务启动时Spring无法扫描到<code>GlobalExceptionHandler</code>。所以，需要手动把<code>GlobalExceptionHandler</code>注册为一个Bean。</p><p>在使用到统一返回格式的所有微服务的<code>/config</code>文件夹创建配置类，进行如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> GlobalExceptionHandler <span class="hljs-title function_">globalExceptionHandler</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalExceptionHandler</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六修改service层的代码">六、修改Service层的代码</h2><p>在Service层需要针对各种请求失败的情况进行异常抛出，从而由全局异常处理器进行捕获处理（调用<code>Response.fail()</code>逻辑）。以用户模块<code>User</code>的查询用户为例，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> userId)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectById(userId);<br>        <span class="hljs-comment">// 如果目标用户不存在，则抛出业务异常，类型为“NOT_FOUND”</span><br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span> || user.isDeleted()) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResponseEnum.NOT_FOUND);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七编写controller层的代码">七、编写Controller层的代码</h2><p>由于把请求失败的所有处理逻辑都交给了Service层和全局异常处理器，所以Controller中只需要对请求成功进行处理即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-comment">// 有返回数据，则把数据封装进Response</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/get/&#123;userId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Response&lt;User&gt; <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;userId&quot;)</span> <span class="hljs-type">int</span> userId)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.getUserById(userId);<br>        <span class="hljs-keyword">return</span> Response.success(user);<br>    &#125;<br><br>    <span class="hljs-comment">// 无返回数据，则Response中数据data为null</span><br>    <span class="hljs-meta">@PostMapping(value = &quot;/delete/&#123;userId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Response&lt;?&gt; deleteUser(<span class="hljs-meta">@PathVariable(&quot;userId&quot;)</span> <span class="hljs-type">int</span> userId) &#123;<br>        userService.deleteUserById(userId);<br>        <span class="hljs-keyword">return</span> Response.success(<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注意feign远程调用的处理">注意：Feign远程调用的处理</h2><p>统一了返回格式之后，所有微服务的响应都封装为<code>Response&lt;T&gt;</code>对象，对于微服务之间互相调用的情况，需要把来自服务提供者的Response中的数据提取出来，再由服务消费者处理后进一步封装返回。所以，微服务之间通过Feign进行远程调用时，客户端接口里的方法返回类型就应该是<code>Response&lt;T&gt;</code>。</p><p>这种情况下，<strong>必须为<code>Response&lt;T&gt;</code>设置公有的无参构造器</strong>，这样才能自动把服务提供者发来的json数据构建为<code>Response</code>实例。</p><p>以订单模块<code>order-service</code>调用用户模块<code>user-service</code>为例，其客户端接口、service和controller编写如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;userservice&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserClient</span> &#123;<br>    <span class="hljs-meta">@GetMapping(value = &quot;/user/get/&#123;userId&#125;&quot;)</span><br>    Response&lt;User&gt; <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;userId&quot;)</span> <span class="hljs-type">int</span> userId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserClient userClient;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">getOrderById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderMapper.selectById(id);<br>        <span class="hljs-keyword">if</span> (order == <span class="hljs-literal">null</span> || order.isDeleted()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResponseEnum.NOT_FOUND);<br>        &#125;<br>        <span class="hljs-comment">// user-service返回的是Response&lt;User&gt;类型，需要解析出其中的User对象</span><br>        Response&lt;User&gt; response= userClient.getUserById(order.getConsumerId());<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> response.getData();<br>        order.setUser(user);<br>        <span class="hljs-keyword">return</span> order;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br>    <br>    <span class="hljs-meta">@GetMapping(value = &quot;/get/&#123;orderId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Response&lt;Order&gt; <span class="hljs-title function_">getOrder</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;orderId&quot;)</span> <span class="hljs-type">int</span> orderId)</span> &#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderService.getOrderById(orderId);<br>        <span class="hljs-keyword">return</span> Response.success(order);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>别忘了给<code>feign-api</code>模块也引入<code>common</code>模块的依赖。</p>]]></content>
    
    
    <categories>
      
      <category>technowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>位运算技巧</title>
    <link href="/2025/01/27/bitOperation/"/>
    <url>/2025/01/27/bitOperation/</url>
    
    <content type="html"><![CDATA[<p>本文将介绍一些位运算的奇技淫巧，并且作为基础知识对整数在计算机中的表示原理作简要补充。<br /><span id="more"></span> 位运算是对二进制位进行直接操作的运算，在某些特定场景下<spanclass="heimu">做LeetCode中某些刁钻怪题时</span>具有优化代码性能等奇效，但会降低代码可读性。</p><h2 id="part-1-有符号整数在计算机中的存储">Part 1有符号整数在计算机中的存储<br /></h2><p>java中的整数是4字节（32bit）的有符号整数，也就是说每个整数都是用一串长度为32的01串表示的。所以，理论上一共可以表示<span class="math inline">\(2^{32}\)</span> 个数。<br />为了区分正整数和负整数，使用最高位作为符号位，符号位0表示正数，为1表示负数。<br /></p><h3 id="原码">原码<br /></h3><p>原码是最高位符号位与剩余31位构成的，剩余的31位用来表示整数的绝对值。因此，原码可以表示的范围为：<spanclass="math inline">\(-2^{31}+1 \sim 2^{31}-1\)</span>，其中真值0拥有[00000000 00000000 00000000 00000000]与[10000000 0000000000000000 00000000]两种表示。<br /></p><h3 id="反码">反码<br /></h3><p>对于正数，其反码就是原码本身；<br />对于负数，其反码是保持符号位不变，而把原码剩余位全部取反得到的。无法从负数的反码直接得出其表示的值。<br /><div class="note note-info">            <p><strong>原码与反码的互相转换</strong><br />1. 首先看符号位，如果符号位为0，则原码和反码完全相同；<br />2.如果符号位为1，则只需把其余位全部取反即可完成原码和反码互相转换。<br /></p>          </div></p><h3 id="补码">补码<br /></h3><p>对于正数，其补码就是原码本身；<br />对于负数，其补码就是把反码加一得到的（符号位也应该参与进位）。无法从负数的补码直接得出其表示的值。<br />补码能够表示的范围比原码更广，包括 <spanclass="math inline">\(2^{31}\)</span> 个负数和 <spanclass="math inline">\(2^{31}\)</span> 个非负数，表示范围为 <spanclass="math inline">\(-2^{31} \sim 2^{31}-1\)</span> 。<br /><div class="note note-info">            <p><strong>原码与补码的互相转换</strong><br />1. 首先看符号位，如果符号位为0，则原码和补码完全相同；<br />2.如果符号位为1，则保持符号位不变，而把剩余位数全部取反后，整体加一。<br /></p>          </div> <div class="note note-warning">            <p><strong>负数补码的性质</strong><br />原码通过符号位不变、剩余位取反后整体加一的操作可以得到补码；补码通过相同操作后也能还原出原码。</p>          </div></p><h2 id="part-2-进制">Part 2 进制</h2><h3 id="二进制与二幂进制的转换">二进制与二幂进制的转换</h3>二幂进制（4进制、8进制、16进制等等）可以与二进制表示之间直接转换，而无需借助10进制辅助中转。<br />以二进制与16进制转换为例，由于 <spanclass="math inline">\(16=2^{4}\)</span>，因此二进制表示中从右往左每4个二进制位就确定了一个16进制位。16进制位与2进制位之间的转换关系如表所示：<br /><table align="center"><caption>2进制与16进制的转换关系</caption><thead><tr><th>10进制</th><th>2进制</th><th>16进制</th><th>10进制</th><th>2进制</th><th>16进制</th></tr></thead><tbody><tr><th>0</th><th>0000</th><th>0</th><th>8</th><th>1000</th><th>8</th></tr><tr><th>1</th><th>0001</th><th>1</th><th>9</th><th>1001</th><th>9</th></tr><tr><th>2</th><th>0010</th><th>2</th><th>10</th><th>1010</th><th>a</th></tr><tr><th>3</th><th>0011</th><th>3</th><th>11</th><th>1011</th><th>b</th></tr><tr><th>4</th><th>0100</th><th>4</th><th>12</th><th>1100</th><th>c</th></tr><tr><th>5</th><th>0101</th><th>5</th><th>13</th><th>1101</th><th>d</th></tr><tr><th>6</th><th>0110</th><th>6</th><th>14</th><th>1110</th><th>e</th></tr><tr><th>7</th><th>0111</th><th>7</th><th>15</th><th>1111</th><th>f</th></tr></tbody></table><h2 id="part-3-基本位运算">Part 3 基本位运算</h2><h3 id="位与">位与<br /></h3><p>当且仅当两个数都为1时，位与才返回1。<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span> &amp; <span class="hljs-number">0</span> = <span class="hljs-number">0</span>;<br><span class="hljs-number">0</span> &amp; <span class="hljs-number">1</span> = <span class="hljs-number">0</span>;<br><span class="hljs-number">1</span> &amp; <span class="hljs-number">0</span> = <span class="hljs-number">0</span>;<br><span class="hljs-number">1</span> &amp; <span class="hljs-number">1</span> = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure> 位与满足交换律与结合律。<br /></p><h3 id="位或">位或<br /></h3><p>只要两个数中存在一个为1，位或就返回1。<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span> | <span class="hljs-number">0</span> = <span class="hljs-number">0</span>;<br><span class="hljs-number">0</span> | <span class="hljs-number">1</span> = <span class="hljs-number">1</span>;<br><span class="hljs-number">1</span> | <span class="hljs-number">0</span> = <span class="hljs-number">1</span>;<br><span class="hljs-number">1</span> | <span class="hljs-number">1</span> = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure> 位或满足交换律与结合律。<br /></p><h3 id="按位取反">按位取反<br /></h3><p>0被修改成1，1被修改成0。<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">~<span class="hljs-number">0</span> = <span class="hljs-number">1</span>;<br>~<span class="hljs-number">1</span> = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></p><h3 id="位异或">位异或<br /></h3><p>两个数相同时返回0，不同时返回1。<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span> ^ <span class="hljs-number">0</span> = <span class="hljs-number">0</span>;<br><span class="hljs-number">0</span> ^ <span class="hljs-number">1</span> = <span class="hljs-number">1</span>;<br><span class="hljs-number">1</span> ^ <span class="hljs-number">0</span> = <span class="hljs-number">1</span>;<br><span class="hljs-number">1</span> ^ <span class="hljs-number">1</span> = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure> 位异或满足交换律与结合律，此外还满足两条性质：<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">a ^ a = <span class="hljs-number">0</span>;<br>a ^ <span class="hljs-number">0</span> = a;<br><span class="hljs-number">0</span> ^ a = a;<br></code></pre></td></tr></table></figure></p><h3 id="移位">移位<br /></h3><ul><li>左移i位：把二进制表示向左移动i位（符号位也会移动），最低位用0补齐，最高位有可能溢出丢失从而导致符号发生改变。每向左移动1位，相当于对原数进行乘以2操作。<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a &lt;&lt; i;<br></code></pre></td></tr></table></figure> 【示例】正数左移4位<br />before: 013 = [<strong>0000</strong>0000 00000000 0000000000001101]<br />after : 208 = [00000000 00000000 000000001101<strong>0000</strong>]<br />【示例】负数左移4位<br />before: -013 = [<strong>1111</strong>1111 11111111 1111111111110011]<br />after : -208 = [11111111 11111111 111111110011<strong>0000</strong>]<br /></li><li>右移i位：把二进制表示向右移动i位（符号位也会移动），最高位用原数的符号位补齐，最低位有可能溢出丢失。每向右移动1位，相当于对原数进行整除2操作。<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a &gt;&gt; i;<br></code></pre></td></tr></table></figure> 【示例】正数右移4位<br />before: 477 = [00000000 00000000 000000011101<strong>1101</strong>]<br />after : 029 = [<strong>0000</strong>0000 00000000 0000000000011101]<br />【示例】负数右移4位<br />before: -477 = [11111111 11111111 111111100010<strong>0011</strong>]<br />after : -030 = [<strong>1111</strong>1111 11111111 1111111111100010]<br /></li><li>无符号右移i位：把二进制表示向右移动i位（符号位也会移动），最高位用一律用0补齐，最低位有可能溢出丢失。所得结果必然是正数。<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a &gt;&gt;&gt; i;<br></code></pre></td></tr></table></figure> 【示例】正数无符号右移4位<br />before: 477 = [00000000 00000000 000000011101<strong>1101</strong>]<br />after : 029 = [<strong>0000</strong>0000 00000000 0000000000011101]<br />【示例】负数无符号右移4位<br />before: -00000477 = [11111111 11111111 111111100010<strong>0011</strong>]<br />after : 268435426 = [<strong>0000</strong>1111 11111111 1111111111100010]<br /></li></ul><h2 id="part-4-位运算的使用技巧">Part 4 位运算的使用技巧</h2><h3 id="基本使用">基本使用<br /></h3><ul><li>原地交换整数变量<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a ^= b; b ^= a; a ^= b;<br></code></pre></td></tr></table></figure></li><li>整数判等<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a ^ b == <span class="hljs-number">0</span>; <span class="hljs-comment">// 相同为true，不同为false</span><br></code></pre></td></tr></table></figure></li><li>取相反数<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">~a + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure> 【示例】求相反数：<br />before: 05 = [00000000 00000000 00000000 00000101]<br />after : -5 = [11111111 11111111 11111111 11111011]</li></ul><h3 id="修改从右往左某一位的状态">修改从右往左某一位的状态<br /></h3><ul><li>把从右往左第i + 1位置为1<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a |= (<span class="hljs-number">1</span> &lt;&lt; i);<br></code></pre></td></tr></table></figure> 【示例】把第6位置为1：<br />before: 05 = [00000000 00000000 0000000000<strong>0</strong>00101]<br />after : 37 = [00000000 00000000 0000000000<strong>1</strong>00101]<br /></li><li>把从右往左第i + 1位置为0<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a &amp;= ~(<span class="hljs-number">1</span> &lt;&lt; i);<br></code></pre></td></tr></table></figure> 【示例】把第4位置为0：<br />before: 47 = [00000000 00000000 000000000010<strong>1</strong>111]<br />after : 39 = [00000000 00000000 000000000010<strong>0</strong>111]<br /></li><li>把从右往左第i + 1位取反<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a ^= (<span class="hljs-number">1</span> &lt;&lt; i);<br></code></pre></td></tr></table></figure> 【示例】把第5位取反：<br />before: 47 = [00000000 00000000 00000000001<strong>0</strong>1111]<br />after : 63 = [00000000 00000000 00000000001<strong>1</strong>1111]<br /></li></ul><h3 id="获取从右往左某一位的状态">获取从右往左某一位的状态<br /></h3><ul><li>获取从右往左第i + 1位的状态<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a &amp; (<span class="hljs-number">1</span> &lt;&lt; i);<br></code></pre></td></tr></table></figure></li><li>判断奇偶性（获取右边第一位的状态）<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a &amp; <span class="hljs-number">1</span> == <span class="hljs-number">0</span>; <span class="hljs-comment">// 奇数为false，偶数为true</span><br></code></pre></td></tr></table></figure></li></ul><h3id="修改二进制表示中最后一个1的状态">修改二进制表示中最后一个1的状态<br /></h3><ul><li>把二进制表示中最后的1置0<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a &amp; (a - <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure> 【示例】把最后一个1变为0<br />before: 88 = [00000000 00000000 000000000101<strong>1</strong>000]<br />after : 80 = [00000000 00000000 000000000101<strong>0</strong>000]<br /></li><li>判断2的幂（把唯一的1删除）<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a &gt; <span class="hljs-number">0</span> &amp;&amp; (a &amp; (a - <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure> 【示例】2的幂处理后变为0：<br />before: 128 = [00000000 00000000 0000000<strong>1</strong>0000000]<br />after : 000 = [00000000 00000000 0000000<strong>0</strong>0000000]<br /></li><li>仅保留二进制表示中的最后一个1<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a &amp; -a<br></code></pre></td></tr></table></figure> 【示例】保留最后一个1：<br />before: 88 = [00000000 00000000 000000000101<strong>1</strong>000]<br />after : 08 = [00000000 00000000 000000000000<strong>1</strong>000]<br /></li></ul><h3id="修改二进制表示中的最后几位的状态">修改二进制表示中的最后几位的状态<br /></h3><ul><li>仅保留最后的i位<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a &amp; ((<span class="hljs-number">1</span> &lt;&lt; i) - <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure> 【示例】仅保留最后的3位：<br />before: 63 = [00000000 00000000 0000000000111<strong>111</strong>]<br />after : 07 = [00000000 00000000 0000000000000<strong>111</strong>]<br /></li><li>把最后的i位全部置0<br /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a &amp; ~((<span class="hljs-number">1</span> &lt;&lt; i) - <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure> 【示例】把最后的3位置为0：<br />before: 63 = [00000000 00000000 0000000000111<strong>111</strong>]<br />after : 56 = [00000000 00000000 0000000000111<strong>000</strong>]<br /></li></ul><h2 id="part-5-位运算实现整数加法">Part 5 位运算实现整数加法</h2><p>通过单纯的位运算能够在不使用+、-运算符的情况下实现整数加法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a ^ b;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> (a &amp; b) &lt;&lt; <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">return</span> getSum(result, carry);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过对a和b进行按位与，获得a与b的无进位加和；而通过对a和b进行按位异或，获得a与b相加的进位情况，再向左移动一位。把无进位加和与进位情况分别视作新的被加数与加数，重复以上过程，直到进位为0。</p>]]></content>
    
    
    <categories>
      
      <category>technowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树形结构系列——字典树（前缀树）</title>
    <link href="/2025/01/26/dictionaryTree/"/>
    <url>/2025/01/26/dictionaryTree/</url>
    
    <content type="html"><![CDATA[<p>字典树（亦称作前缀树、Trie树）是一种用于存储、查找字符串以及查找字符串前缀的树形结构，本质上是一种哈希树。采用空间换时间策略，利用公共前缀来节约存储空间，使得字符串存储和查找的效率优化至O(k)，其中k为字符串的长度。可以用于自动补全、关键词搜索、IP路由等功能。<span id="more"></span></p><h2 id="字典树的成员变量">字典树的成员变量</h2><ul><li><code>Trie[]</code>类型的<code>children</code>变量记录该节点字符的后继字符，对于全大写或全小写的纯英文字符，该数组下标0~25代表a~z。也就是说字典树是一棵“26叉树”。</li><li><code>boolean</code>类型的<code>isEnd</code>变量用于标记该节点是否被作为某个字符串的结尾。</li><li><code>int</code>类型的<code>wordCount</code>变量记录以该前缀开头的单词数目。</li><li><code>Trie</code>类型的<code>parent</code>变量记录当前节点的父节点。</li></ul><h2 id="字典树的成员方法">字典树的成员方法</h2><h3 id="公有方法">公有方法</h3><ul><li>无参构造器 <code>Trie()</code></li><li>插入单词 <code>void insert(String word)</code></li><li>查找单词 <code>boolean search(String word)</code></li><li>查找前缀 <code>boolean startsWith(String prefix)</code></li><li>删除单词 <code>void remove(String word)</code></li><li>获取以某个前缀开头的所有单词<code>List&lt;String&gt; getWordsStartWith(String prefix)</code></li><li>获取以某个前缀开头的单词数目<code>int numberOfStartWith(String prefix)</code></li></ul><h3 id="私有方法">私有方法</h3><ul><li>获取字符串的最后一个节点<code>Trie getPrefix(String prefix)</code></li><li>深度优先搜索<code>void backtracking(Trie node, List&lt;String&gt; res, StringBuilder path)</code></li><li>判断叶子节点（孩子是否全空）<code>boolean isEmpty(Trie[] children)</code></li></ul><h2 id="代码实现">代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br>    Trie[] children;<br>    <span class="hljs-type">boolean</span> isEnd;<br>    <span class="hljs-type">int</span> wordCount;<br>    Trie parent;<br><br>    <span class="hljs-comment">/* 公有无参构造器，</span><br><span class="hljs-comment">     * 以全小写纯英文字符串字典树为例，每个节点的下方有26个孩子，每个孩子也都是一棵字典树</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;<br>        children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Trie</span>[<span class="hljs-number">26</span>];<br>        isEnd = <span class="hljs-literal">false</span>;<br>        wordCount = <span class="hljs-number">0</span>;<br>        parent = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* void insert方法，向字典树中添加新的单词</span><br><span class="hljs-comment">     * 遍历单词的每一个字母，如果对应节点在字典树中不存在，则添加节点（扩展该节点的子树），并且继续处理下一个节点；如果对应节点在字典树中已存在，则直接处理下一个节点</span><br><span class="hljs-comment">     * 插入完毕后，需要把末尾节点标记为true</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String word)</span> &#123;<br>        <span class="hljs-type">Trie</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> word.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (node.children[index] == <span class="hljs-literal">null</span>) &#123;<br>                node.children[index] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Trie</span>();<br>                node.children[index].parent = node;<br>            &#125;<br>            node.wordCount += <span class="hljs-number">1</span>;<br>            node = node.children[index];<br>        &#125;<br>        node.isEnd = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* boolean search方法，查找特定单词</span><br><span class="hljs-comment">     * 直接调用辅助方法getPrefix，获取给定单词在字典树中的最后一个节点</span><br><span class="hljs-comment">     * 当且仅当该节点非空（在字典树中存在）并且该节点为true（以该节点结尾）时，才返回true</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;<br>        <span class="hljs-type">Trie</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> getPrefix(word);<br>        <span class="hljs-keyword">return</span> node != <span class="hljs-literal">null</span> &amp;&amp; node.isEnd;<br>    &#125;<br><br>    <span class="hljs-comment">/* boolean startsWith方法，查找特定前缀</span><br><span class="hljs-comment">     * 逻辑与查找特定单词基本相同，但由于只需要查找前缀，所以不用关心是否以节点结尾</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span> &#123;<br>        <span class="hljs-type">Trie</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> getPrefix(prefix);<br>        <span class="hljs-keyword">return</span> node != <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* List&lt;Integer&gt; getWordsStartWith方法，获取以特定前缀开头的所有单词列表</span><br><span class="hljs-comment">     * 通过回溯搜索以prefix开头的子树</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getWordsStartWith</span><span class="hljs-params">(String prefix)</span> &#123;<br>        <span class="hljs-type">Trie</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> getPrefix(prefix);<br>        List&lt;String&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        backtracking(node, res, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(prefix));<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-comment">/* int numberOfStartWith方法，获取以给定前缀开头的单词数目</span><br><span class="hljs-comment">     * 只要获取该前缀的最后一个节点，直接返回其wordCount值</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numberOfStartWith</span><span class="hljs-params">(String prefix)</span> &#123;<br>        <span class="hljs-type">Trie</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> getPrefix(prefix);<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> node.wordCount;<br>    &#125;<br><br>    <span class="hljs-comment">/* 私有方法 Trie getPrefix，用于返回给定字符串的最后一个节点</span><br><span class="hljs-comment">     * 遍历字符串的每一个字母，如果对应节点在字典树中不存在，则直接返回null；否则继续处理下一个节点</span><br><span class="hljs-comment">     * 遍历结束后返回的node就是给定字符串的最后一个字母在字典树中对应的节点</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Trie <span class="hljs-title function_">getPrefix</span><span class="hljs-params">(String prefix)</span> &#123;<br>        <span class="hljs-type">Trie</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; prefix.length(); i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> prefix.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (node.children[index] == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            node = node.children[index];<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-comment">/* 私有方法 void backtracking，用于针对给定的前缀搜索全部单词</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtracking</span><span class="hljs-params">(Trie node, List&lt;String&gt; res, StringBuilder path)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span> || isEmpty(node.children)) &#123;<br>            res.add(path.toString());<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; node.children.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (node.children[i] == <span class="hljs-literal">null</span>) <span class="hljs-keyword">continue</span>;<br>            path.append((<span class="hljs-type">char</span>) (i + <span class="hljs-string">&#x27;a&#x27;</span>));<br>            backtracking(node.children[i], res, path);<br>            path.deleteCharAt(path.length() - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* 私有方法 boolean isEmpty，用于判断节点的孩子是否全空</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(Trie[] children)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; children.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (children[i] != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* void remove方法，从字典树中删除单词</span><br><span class="hljs-comment">     * 获取给定单词的最后一个节点，如果不存在或者不是单词结尾就结束</span><br><span class="hljs-comment">     * 如果该节点不是叶子，则只要清除结尾标记即可</span><br><span class="hljs-comment">     * 如果该节点是叶子，则往上找到最近的单词结尾，把后续分支直接置空删除即可</span><br><span class="hljs-comment">     * 最后要把从根节点到删除后的节点之间全部节点的计数减一</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(String word)</span> &#123;<br>        <span class="hljs-type">Trie</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> getPrefix(word);<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span> || !node.isEnd) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-keyword">if</span> (!isEmpty(node.children)) &#123;<br>            node.isEnd = <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Trie</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> node;<br>            node = node.parent;<br>            <span class="hljs-keyword">while</span> (node != <span class="hljs-literal">null</span> &amp;&amp; !node.isEnd &amp;&amp; node.wordCount &lt;= <span class="hljs-number">1</span>) &#123;<br>                pre = node;<br>                node = node.parent;<br>            &#125;<br><br>            pre = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            node.wordCount -= <span class="hljs-number">1</span>;<br>            node = node.parent;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字典树的应用">字典树的应用</h2><h3id="例题-421.数组中两个数的最大异或值httpsleetcode.cnproblemsmaximum-xor-of-two-numbers-in-an-arraydescriptionenvtypeproblem-list-v2envidhash-table">例题：421.数组中两个数的最大异或值（https://leetcode.cn/problems/maximum-xor-of-two-numbers-in-an-array/description/?envType=problem-list-v2&amp;envId=hash-table）</h3><p>给你一个整数数组<code>nums</code>，返回<code>nums[i] XOR nums[j]</code>的最大运算结果，其中<code>0 ≤ i ≤ j &lt; n</code>。</p><p>如果采用两层for循环暴力搜寻会超时，因为做了大量无效搜索。注意到，要使异或值最大，那么就要优先保证二进制高位不相同，所以需要从高位向低位进行比较，这与字典树的比较方式相同。</p><p>为了减小时间复杂度，就要直接获得对于每个元素而言，其他哪个元素与其异或后结果最大，整个数组的最大异或值只能从这些候选值中。为此，可以使用字典树来把时间复杂度降到O(n)。</p><ul><li>首先把数组中所有元素按照二进制位存储在字典树中；</li><li>然后，遍历数组，采用贪心策略，优先选择走当前元素对应位相反的分支（如果存在该分支的话），这样走到叶子节点后得到的路径就是能让该元素异或值最大的数；</li><li>遍历过程中不断更新历史最大异或值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findMaximumXOR</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">Trie</span> <span class="hljs-variable">tree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Trie</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) tree.insert(num);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> Integer.MIN_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) ans = Math.max(ans, num ^ tree.match(num));<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isEnd;<br>    <span class="hljs-keyword">private</span> Trie[] children;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;<br>        isEnd = <span class="hljs-literal">false</span>;<br>        children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Trie</span>[<span class="hljs-number">2</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-type">int</span>[] bits = getBits(num);<br>        <span class="hljs-type">Trie</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">31</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> bits[i];<br>            <span class="hljs-keyword">if</span> (node.children[idx] == <span class="hljs-literal">null</span>) &#123;<br>                node.children[idx] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Trie</span>();<br>            &#125;<br>            node = node.children[idx];<br>        &#125;<br>        node.isEnd = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取与num能够取得最大异或值的另一个元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">match</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">candidate</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span>[] bits = getBits(num);<br>        <span class="hljs-type">Trie</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">31</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">idxMatch</span> <span class="hljs-operator">=</span> bits[i] == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (node.children[idxMatch] == <span class="hljs-literal">null</span>) &#123;<br>                node = node.children[bits[i]];<br>                candidate  = (candidate &lt;&lt; <span class="hljs-number">1</span>) + (bits[i]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                node = node.children[idxMatch];<br>                candidate = (candidate &lt;&lt; <span class="hljs-number">1</span>) + idxMatch;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> candidate;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取数字的二进制表示</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] getBits(<span class="hljs-type">int</span> num) &#123;<br>        <span class="hljs-type">int</span>[] bits = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">31</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">31</span>) &#123;<br>            bits[<span class="hljs-number">30</span> - i++] = (num &amp; <span class="hljs-number">1</span>);<br>            num &gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> bits;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>technowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>高级数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始种出一棵红黑树</title>
    <link href="/2024/11/21/HowToGrowAnRBTFromNull/"/>
    <url>/2024/11/21/HowToGrowAnRBTFromNull/</url>
    
    <content type="html"><![CDATA[<p>  本文将教你如何从零开始用Java码出红黑树。 <span id="more"></span></p><h2 id="红黑树的基本定义">红黑树的基本定义</h2><p>  红黑树是一种<strong>弱平衡</strong>的二叉搜索树。也就是说，它首先是一棵二叉搜索树。另外，它需要满足以下5条性质，正是这5条性质保证了红黑树在插入和删除元素时能够自动调节到平衡状态。这5条性质习惯上简称为“红黑性”。</p><p>①节点是红色或黑色；<br />②根节点<strong>必须是黑色</strong>；<br />③叶子节点<strong>必须是黑色</strong>；<br /><div class="note note-info">            <p>  红黑树的叶子节点指的是“空节点<code>null</code>”！为了不与特指<code>null</code>节点的叶子节点混淆，本文中把两个孩子都是<code>null</code>的节点简称为“无子节点”。</p>          </div>④红色节点的子节点和父节点<strong>必须是黑色</strong>；（或者表述为：不能连续出现红色节点）<br />⑤从任一节点到叶子节点的所有路径都包含相同数目的黑色节点。（<strong>黑节点高度平衡</strong>）<br /></p><p>  与一般的树结构在Java中的存储方式一样，红黑树也是用树节点类来实现的。与一般的树有些许的区别在于，需要有一个颜色属性用来记录节点的颜色。另外，由于需要经常用到父节点信息，所以为了方便也要记录每个节点的父节点！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义红黑树类，其内部类定义为红黑节点</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedBlackTree</span> &#123;<br>    <span class="hljs-keyword">private</span> Node root;<br><br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<br>        RED,<br>        BLACK,<br>    &#125;<br><br>    <span class="hljs-comment">// 红黑节点包含成员变量：值、颜色、左孩子、右孩子、父节点</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-type">int</span> val;<br>        Color color;<br>        Node left;<br>        Node right;<br>        Node parent;<br><br>        Node(<span class="hljs-type">int</span> val) &#123;<br>            <span class="hljs-built_in">this</span>.val = val;<br>            <span class="hljs-built_in">this</span>.color = Color.RED; <span class="hljs-comment">// 新节点默认红色，可以最大程度减小调整工作量</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 左旋和右旋</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">leftRotate</span><span class="hljs-params">(Node node)</span> &#123;&#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rightRotate</span><span class="hljs-params">(Node node)</span> &#123;&#125;;<br><br>    <span class="hljs-comment">// 查找元素</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">search</span><span class="hljs-params">(Node root, <span class="hljs-type">int</span> val)</span> &#123;&#125;;<br><br>    <span class="hljs-comment">// 插入新元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;&#125;;<br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">bstInsert</span><span class="hljs-params">(Node root, Node newNode)</span> &#123;&#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fixIInsert</span><span class="hljs-params">(Node node)</span> &#123;&#125;;<br><br>    <span class="hljs-comment">// 删除元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;&#125;;<br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">getMinimum</span><span class="hljs-params">(Node node)</span> &#123;&#125;;<br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">problemConversion</span><span class="hljs-params">(Node targetNode)</span> &#123;&#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fixDelete</span><span class="hljs-params">(Node fixNode)</span> &#123;&#125;;<br><br>    <span class="hljs-comment">// 输出树的形状</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printTree</span><span class="hljs-params">()</span> &#123;&#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printTree</span><span class="hljs-params">(Node node, String indent, <span class="hljs-type">boolean</span> last)</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>  红黑树节点之间的关系非常重要，以下列举说明了在本文中经常用到的几种节点的名称：<br /></p><ul><li>子节点<code>children</code>：二叉树一般理论中的子节点，分为左孩子<code>left</code>和右孩子<code>right</code>。</li><li>兄节点<code>sibling</code>：与考察节点有公共父节点的节点。（也就是父节点的另一个孩子）</li><li>父节点<code>parent</code>：二叉树一般理论中的“父节点”。</li><li>舅节点<code>uncle</code>：父节点的兄节点。</li><li>祖节点<code>grandparent</code>：父节点的父节点。</li><li>侄节点<code>nephew</code>：兄节点的孩子。</li></ul>  本文的图示法用到的图例如下图所示：<figure><img src="/../img/redBlackTree/legend.png" height=300px><figcaption>图例</figcaption></figure><h2 id="节点的查找">节点的查找</h2><p>  由于红黑树本质上就是二叉搜索树，因此其查找操作并无特别之处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 核心方法：查找目标节点</span><br><span class="hljs-keyword">public</span> Node <span class="hljs-title function_">search</span><span class="hljs-params">(Node root, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span> || root.val == val) &#123;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (val &lt; root.val) &#123;<br>        <span class="hljs-keyword">return</span> search(root.left, val);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> search(root.right, val);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="节点的旋转">节点的旋转</h2><h3 id="左旋操作">左旋操作</h3><p>  节点的左旋操作是指，该节点成为其右孩子的左孩子，而其右孩子取代该节点原本的位置。另外，为了保证二叉搜索树的顺序，其右孩子的左孩子会成为该节点新的右孩子。<br />  需要注意的是，由于每个节点还具有成员变量<code>parent</code>，所以每次修改节点之间的连接方式时，<strong>别忘了也要修改相关节点的</strong><code>parent</code><strong>的值</strong>。<br />  节点左旋的过程分为三大步：<br />第①步：用该节点右孩子的左孩子去成为该节点新的右孩子（涉及该节点右孩子的左孩子的<code>parent</code>值变动）；<br />第②步：用该节点原本的右孩子取代该节点原本的位置（涉及该节点原本的右孩子的<code>parent</code>值变动）；<br />第③步：把该节点变成其原本右孩子的左孩子（涉及该节点本身<code>parent</code>的值变动）。<br />  综上可见，整个左旋过程涉及了目标节点、其父节点、其右孩子、其右孩子的左孩子，四者之间连接方式的变化。因此，目标节点、其右孩子、其右孩子的左孩子都需要改变<code>parent</code>的值。</p><figure><img src="/../img/redBlackTree/leftRotation.png" height=180px><figcaption>节点A的左旋操作</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">leftRotate</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> node.right;<br><br>    <span class="hljs-comment">// Step 1：用该节点右孩子的左孩子去成为该节点新的右孩子</span><br>    node.right = temp.left;<br>    <span class="hljs-keyword">if</span> (temp.left != <span class="hljs-literal">null</span>) &#123;<br>        temp.left.parent = node;<br>    &#125;<br><br>    <span class="hljs-comment">// Step 2：用该节点原本的右孩子取代该节点原本的位置</span><br>    temp.parent = node.parent;<br>    <span class="hljs-keyword">if</span> (node.parent == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// Case 1：node原本为根节点，则左旋之后的新根节点变为temp</span><br>        root = temp;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node == node.parent.left) &#123; <span class="hljs-comment">// Case 2&amp;3：node不是根节点，则左旋不会影响树的根节点</span><br>        node.parent.left = temp;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node.parent.right = temp;<br>    &#125;<br><br>    <span class="hljs-comment">// Step 3：用该节点成为其原本右孩子的左孩子</span><br>    temp.left = node;<br>    node.parent = temp;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="右旋操作">右旋操作</h3><p>  节点的右旋操作是指，该节点成为其左孩子的右孩子，而其左孩子取代该节点原本的位置。另外，为了保证二叉搜索树的顺序，其左孩子的右孩子会成为该节点新的左孩子。<br />  节点右旋的过程与左旋非常相似，分为三大步：<br />第①步：用该节点左孩子的右孩子去成为该节点新的左孩子（涉及该节点左孩子的右孩子的<code>parent</code>值变动）；<br />第②步：用该节点原本的左孩子取代该节点原本的位置（涉及该节点原本的左孩子的<code>parent</code>值变动）；<br />第③步：把该节点变成其原本左孩子的右孩子（涉及该节点本身<code>parent</code>的值变动）。<br />  综上可见，整个左旋过程涉及了目标节点、其父节点、其左孩子、其左孩子的右孩子，四者之间连接方式的变化。因此，目标节点、其左孩子、其左孩子的右孩子都需要改变<code>parent</code>的值。</p><figure><img src="/../img/redBlackTree/rightRotation.png" height=180px><figcaption>节点A的右旋操作</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rightRotate</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> node.left;<br><br>    <span class="hljs-comment">// Step 1：用该节点左孩子的右孩子去成为该节点新的左孩子</span><br>    node.left = temp.right;<br>    <span class="hljs-keyword">if</span> (temp.right != <span class="hljs-literal">null</span>) &#123;<br>        temp.right.parent = node;<br>    &#125;<br><br>    <span class="hljs-comment">// Step 2：用该节点原本的左孩子取代该节点原本的位置</span><br>    temp.parent = node.parent;<br>    <span class="hljs-keyword">if</span> (node.parent == <span class="hljs-literal">null</span>) &#123;<br>        root = temp;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node == node.parent.right) &#123;<br>        node.parent.right = temp;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node.parent.left = temp;<br>    &#125;<br><br>    <span class="hljs-comment">// Step 3：用该节点成为其原本左孩子的右孩子</span><br>    temp.right = node;<br>    node.parent = temp;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="节点的插入">节点的插入</h2><p><strong>第一步：</strong>执行二叉搜索树的插入逻辑。<br /><strong>第二步：</strong>把新插入节点涂上红色。<br /><strong>第三步：</strong>如果父节点也是红色，则第二步一定会破坏红黑树的性质。所以需要调整节点颜色以及旋转节点，让树重新满足红黑树的性质。<br />  对于父节点就是黑色节点的情形，由于插入红色节点不会改变经过该节点的路径上的黑色节点数目，所以插入后无需额外改动；<br />  而对于父节点是红色的情形，由于违背了“不能连续出现红色节点”的规定，所以需要进行调整。根据舅节点的颜色以及新节点与父节点的位置关系分为三种情况：</p><h3id="情况一父节点和舅节点都是红色三红连珠">情况一：父节点和舅节点都是红色（三红连珠）</h3>把父节点和舅节点全变为黑色，把祖节点变为红色。然后把祖节点看作新节点，继续调整。<figure><img src="/../img/redBlackTree/insertionCase1.png" height=220px><figcaption>情况1：三红连珠</figcaption></figure><h3id="情况二只有父节点为红色祖孙三代成角">情况二：只有父节点为红色，祖孙三代成角</h3>把父节点绕子节点旋转，使之变成祖孙三代共线（情况三）。<figure><img src="/../img/redBlackTree/insertionCase2.png" height=220px><figcaption>情况2：三代成角</figcaption></figure><h3id="情况三只有父节点为红色祖孙三代共线">情况三：只有父节点为红色，祖孙三代共线</h3>把父节点和祖节点反色，然后祖节点绕父节点旋转。<figure><img src="/../img/redBlackTree/insertionCase3.png" height=220px><figcaption>情况3：三代共线</figcaption></figure><h3 id="插入节点的代码实现">插入节点的代码实现</h3><p>  这里集结了红黑树插入功能模块的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(val);<br>    root = bstInsert(root, newNode);<br>    fixInsert(newNode);<br>&#125;<br><br><span class="hljs-comment">// 辅助方法：二叉搜索树的插入，返回新树的根节点</span><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">bstInsert</span><span class="hljs-params">(Node root, Node newNode)</span> &#123;<br>    <span class="hljs-comment">// 递归终止条件：如果递归到空树，则当前位置就是目标位置</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> newNode;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 否则，执行二叉搜索树的插入逻辑</span><br>    <span class="hljs-keyword">if</span> (newNode.val &lt; root.val) &#123;<br>        root.left = bstInsert(root.left, newNode);<br>        root.left.parent = root;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newNode.val &gt; root.val) &#123;<br>        root.right = bstInsert(root.right, newNode);<br>        root.right.parent = root;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br><br><span class="hljs-comment">// 辅助方法：调整红黑树</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fixInsert</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">// 只要当前节点不是根节点，并且当前节点的父节点是红色</span><br>    <span class="hljs-keyword">while</span> (node != root &amp;&amp; node.parent.color == Color.RED) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> node.parent;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">grandparent</span> <span class="hljs-operator">=</span> parent.parent;<br><br>        <span class="hljs-comment">// Branch 1：父节点是祖节点的左孩子</span><br>        <span class="hljs-keyword">if</span> (parent == grandparent.left) &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">uncle</span> <span class="hljs-operator">=</span> grandparent.right;<br><br>            <span class="hljs-keyword">if</span> (uncle != <span class="hljs-literal">null</span> &amp;&amp; uncle.color == Color.RED) &#123;<br>                <span class="hljs-comment">// Case 1: 三红连珠。祖节点、父节点、舅节点全部反色，然后把祖节点看作新节点继续考察</span><br>                parent.color = Color.BLACK;<br>                uncle.color = Color.BLACK;<br>                grandparent.color = Color.RED;<br>                node = grandparent;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (node == parent.right) &#123;<br>                    <span class="hljs-comment">// Case 2：三代成角。父节点左旋，转化成Case 3。</span><br>                    leftRotate(parent);<br>                    <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> parent;<br>                    parent = node;<br>                    node = temp;<br>                &#125;<br>                <span class="hljs-comment">// Case 3：三代共线。祖节点和父节点反色，祖节点右旋。</span><br>                parent.color = Color.BLACK;<br>                grandparent.color = Color.RED;<br>                rightRotate(grandparent);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// Branch 2：父节点是祖节点的右孩子</span><br>            <span class="hljs-type">Node</span> <span class="hljs-variable">uncle</span> <span class="hljs-operator">=</span> grandparent.left;<br><br>            <span class="hljs-keyword">if</span> (uncle != <span class="hljs-literal">null</span> &amp;&amp; uncle.color == Color.RED) &#123;<br>                <span class="hljs-comment">// Case 1: 三红连珠。祖节点、父节点、舅节点全部反色，然后把祖节点看作新节点继续考察</span><br>                parent.color = Color.BLACK;<br>                uncle.color = Color.BLACK;<br>                grandparent.color = Color.RED;<br>                node = grandparent;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (node == parent.left) &#123;<br>                    <span class="hljs-comment">// Case 2：三代成角。父节点右旋，转化成Case 3。</span><br>                    rightRotate(parent);<br>                    <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> parent;<br>                    parent = node;<br>                    node = temp;<br>                &#125;<br>                <span class="hljs-comment">// Case 3：三代共线。祖节点和父节点反色，祖节点左旋。</span><br>                parent.color = Color.BLACK;<br>                grandparent.color = Color.RED;<br>                leftRotate(grandparent);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 最后把根节点固定成黑色</span><br>    root.color = Color.BLACK;<br>&#125;<br></code></pre></td></tr></table></figure><p>  你可能在<code>fixInsert()</code>方法上会有疑惑。在<code>fixInsert()</code>方法中出现了以下两行代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (node != root &amp;&amp; node.parent.color == Color.RED) &#123;&#125;;<br><br>root.color = Color.BLACK;<br></code></pre></td></tr></table></figure>  为什么这两处提到根节点时直接用了<code>root</code>呢？虽然在二叉搜索树的插入方法<code>bstInsert()</code>中更新了插入新元素后的根节点，但是红黑树在调整过程中仍然有可能发生根节点变动，导致<code>root</code>不是真实的根节点！<br />  这种担心确实并非多余。实际上，左旋和右旋非常容易踩坑，因为很有可能就忽略了旋转之后根节点变化的情况，导致<code>root</code>的引用是之前的根节点，从而出bug。但是，此处直接使用<code>root</code>没问题的！这是因为所有可能涉及根节点变动的方法（二叉搜索树的插入元素、二叉搜索树的删除元素、左旋和右旋）都考虑了根节点改动的可能性，并在发生变动时及时更新了<code>root</code>的引用。这样，保证了<code>root</code>自始至终都是当前这棵树的真实根节点。<br />  如果要更为谨慎的话，确实可以使用以下的写法： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (node.parent != <span class="hljs-literal">null</span> &amp;&amp; node.parent.color == Color.RED) &#123;&#125;;<br><br><span class="hljs-keyword">while</span> (node.parent != <span class="hljs-literal">null</span>) &#123;<br>    node = node.parent;<br>&#125;<br>root = node;<br>root.color = Color.BLACK;<br></code></pre></td></tr></table></figure></p><h3 id="实例构建红黑树">实例：构建红黑树</h3><div class="note note-success">            <p><strong>演示：构建红黑树</strong><br />  给定一个空红黑树，给定按升序排列的数组<code>nums = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}</code>，按照元素顺序逐个插入红黑树。</p><ol start="0" type="1"><li>插入元素 <span class="math inline">\(0\)</span>时，直接插入新的红色节点<code>0</code>，但违反了“根节点必须为黑色”的性质，因此需要把节点<code>0</code>改成黑色；<figure><img src="/../img/redBlackTree/addEle0.png"  height=80px></figure></li><li>插入元素 <span class="math inline">\(1\)</span>时，先让红色节点<code>1</code>成为节点<code>0</code>的右孩子。经检验，此时已经满足红黑树性质；<figure><img src="/../img/redBlackTree/addEle1.png"  height=100px></figure></li><li>插入元素 <span class="math inline">\(2\)</span>时，先让红色节点<code>2</code>成为节点<code>1</code>的右孩子。此时违反了“不能出现连续两个红色节点”的性质，经观察此时属于情况3，于是经过调整后满足红黑性；<figure><img src="/../img/redBlackTree/addEle2.png"></figure></li><li>插入元素 <span class="math inline">\(3\)</span>时，先让红色节点<code>3</code>成为节点<code>2</code>的右孩子。此时违反了“不能出现连续两个红色节点”的性质，经观察此时属于情况1，于是经过调整后，根节点<code>1</code>变为红色，需要进一步修改以满足红黑性；<figure><img src="/../img/redBlackTree/addEle3.png"></figure></li><li>插入元素 <span class="math inline">\(4\)</span>的调整过程如图所示，不再赘述；<figure><img src="/../img/redBlackTree/addEle4.png"></figure></li><li>插入元素 <span class="math inline">\(5\)</span>的调整过程如图所示，不再赘述；<figure><img src="/../img/redBlackTree/addEle5.png"></figure></li><li>插入元素 <span class="math inline">\(6\)</span>的调整过程如图所示，不再赘述；<figure><img src="/../img/redBlackTree/addEle6.png"></figure></li><li>插入元素 <span class="math inline">\(7\)</span>的调整过程如图所示，不再赘述；<figure><img src="/../img/redBlackTree/addEle7.png"></figure></li><li>插入元素 <span class="math inline">\(8\)</span>的调整过程如图所示，不再赘述；<figure><img src="/../img/redBlackTree/addEle8.png"></figure></li><li>插入元素 <span class="math inline">\(9\)</span>的调整过程如图所示，不再赘述；<figure><img src="/../img/redBlackTree/addEle9.png"></figure></li></ol>          </div><h2 id="节点的删除">节点的删除</h2><p>  所谓“相见时难别亦难”，所有树结构的删除操作都比插入操作显著复杂。插入操作对红黑性的破坏体现在违背了“不能连续出现红色节点”，而删除操作则破坏了“黑高性”。删除红黑树节点的大体步骤也分为三步：<br /><strong>第一步：</strong>找到待删除节点；<br /><strong>第二步：</strong>采用二叉搜索树的删除方法进行删除；<br /><strong>第三步：</strong>调整，使之重新满足红黑性。</p><div class="note note-info">            <p><strong>二叉搜索树的删除操作</strong></p><p>总体来看，目标节点有三种可能的情形：目标节点没有孩子、目标节点只有一个孩子、目标节点有两个孩子。</p><ul><li><p>目标节点没有孩子<br />直接删除该节点。</p></li><li><p>目标节点只有一个孩子<br />用该节点的孩子替代该节点。</p></li><li><p>目标节点有两个孩子<br />找到该节点的直接后继节点（其右子树中的最小值，通过<code>node = root.right; while (node.left != null) node = node.left;</code>得到），把目标节点的值替换为后继的值，然后问题转化为删除原本的后继节点（最终能够递归成前两种情形）。</p></li></ul><p>所有排序树的删除操作都遵循上述基本思路。</p>          </div><p>  因为目标节点有两个孩子的情形总归可以转化为前两种情形，因此只需要研究前两种情形在删除节点后的调整方法。</p><h3id="局面onekid目标节点只有一个孩子">局面OneKid：目标节点只有一个孩子</h3>  对于红黑树而言，如果目标节点只有一个孩子，受限于红黑性，那么以该节点为根的子树只有可能呈现以下两种形态。也就是说，目标节点必定是黑色，而且其唯一的孩子必须是红色的无子节点！<figure><img src="/../img/redBlackTree/branch0.png" height=300px><figcaption>局面1：OneKid</figcaption></figure><p>处理这种情况只需要在用孩子替换目标节点之后，重新染成黑色即可。<br />  而删除无子节点就值得讨论了。大方向上需要根据目标节点的颜色分成两种：删除红色无子节点和删除黑色无子节点。</p><h3id="局面rednone目标节点没有孩子目标节点是红色">局面RedNone：目标节点没有孩子，目标节点是红色</h3>  如果是删除红色无子节点，此情形最为简单，直接删除即可（不会破坏红黑性）；<figure><img src="/../img/redBlackTree/directDeleteRed.png" height=100px><figcaption>局面2-1：RedNone</figcaption></figure><p>  而因为删除黑色节点必定会破坏黑高性，所以删除黑色无子节点非常复杂。这里引入“双黑节点”的概念可以方便地理解红黑树的修复过程。删除黑色无子节点后，这个位置会变成叶子节点（叶子节点必须是黑色），因此所有经过这个节点的路径都会比其余路径少一个黑色节点。为此，我们给这个叶子节点赋予一种“双黑”的效果，它表示这个节点“缺失”了一个黑色，所以需要“双倍”的黑色才能补偿这条路径上的黑高。在后续的修复过程中，这层“双黑”效果可能会转移到其他节点上，而当某些特殊条件被满足后，双黑效果最终能够被消除。双黑效果的消除意味着树重新满足了红黑性。因此，修复红黑树的目标就是通过一定的变换，消除掉双黑效果。<br />  在代码实现上，并不需要真的定义“双黑”这种颜色。因为“双黑”在很多情况下会失效或退化，只有双黑黑色节点才有必要继续考虑，因此只要对双黑黑色节点调用特定方法即可。<br />  删除黑色节点后，修复红黑树需要根据其兄节点和侄节点的颜色。</p><h3id="局面blacknone-black目标节点是黑色而且兄节点为黑色">局面BlackNone-Black：目标节点是黑色，而且兄节点为黑色</h3><p>  如果目标节点的兄节点是黑色，那么需要考察侄节点的情况。</p><h4id="情况blacknone-black-red兄节点有1个或2个红色孩子">情况BlackNone-Black-Red：兄节点有1个或2个红色孩子</h4><p>  只要兄节点存在一个孩子是红色，就属于这种情况。如果兄节点的两个孩子都是红色，则既可以当成分支BlackNone-Black-Red-Line也可以当成BlackNone-Black-Red-Angle来处理。（当成BlackNone-Black-Red-Line更简单）</p><h5id="分支blacknone-black-red-line侄节点为红色父兄侄共线">分支BlackNone-Black-Red-Line：侄节点为红色，父兄侄共线</h5>  删除目标节点后，得到双黑叶子节点。先把侄节点变成兄节点颜色，然后把兄节点变成父节点颜色，再把父节点变成黑色，最后旋转父节点。双黑失效，调整完毕。<figure><img src="/../img/redBlackTree/branch2-1-1Left.png" height=300px><img src="/../img/redBlackTree/branch2-1-1Right.png" height=300px><figcaption>局面2-2-1-1-a：BlackNone-Black-Red-Line</figcaption></figure><h5id="分支blacknone-black-red-angle侄节点为红色父兄侄成角">分支BlackNone-Black-Red-Angle：侄节点为红色，父兄侄成角</h5>  删除目标节点后，得到双黑叶子节点。先把侄节点直接变成父节点颜色，然后把父节点变成黑色。先旋转兄节点，再旋转父节点。双黑失效，调整完毕。<figure><img src="/../img/redBlackTree/branch2-1-2Left.png" height=300px><img src="/../img/redBlackTree/branch2-1-2Right.png" height=300px><figcaption>局面2-2-1-1-b：BlackNone-Black-Red-Angle</figcaption></figure><h4id="情况blacknone-black-black兄节点没有红色孩子">情况BlackNone-Black-Black：兄节点没有红色孩子</h4>  一般情况下（双黑节点是叶子节点），如果兄节点没有红色孩子，那么根据红黑性，兄节点必须是无子节点。但是如果这个双黑节点是由孩子转移上来的，那么兄节点没有红孩子也有可能是拥有两个黑孩子。<br />  删除目标节点后，得到双黑叶子节点。先把兄节点反色为红色，然后把双黑效果向上转移到父节点。如果父节点是红色，则直接中和成黑色节点，双黑失效，调整完毕；如果父节点是黑色，则继续考察双黑父节点。<figure><img src="/../img/redBlackTree/branch2-2.png" height=100px><figcaption>局面2-2-1-2：BlackNone-Black-Black</figcaption></figure><h3id="局面blacknone-red目标节点是黑色而且兄节点为红色">局面BlackNone-Red：目标节点是黑色，而且兄节点为红色</h3>  根据红黑性，如果兄节点是红色，那么它必须有两个黑色子节点。<br />  删除目标节点后，得到双黑叶子节点。先把兄节点和父节点都反色，然后旋转父节点。旋转完毕后，继续考察双黑叶子节点。<figure><img src="/../img/redBlackTree/branch3.png" height=300px><figcaption>局面2-2-2：BlackNone-Red</figcaption></figure><h3 id="删除节点的代码实现">删除节点的代码实现</h3><p>  这里集结了红黑树删除功能模块的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">targetNode</span> <span class="hljs-operator">=</span> search(root, val);<br>    <span class="hljs-keyword">if</span> (targetNode == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">deleteNode</span> <span class="hljs-operator">=</span> problemConversion(targetNode);<br><br>    <span class="hljs-comment">// 局面OneKid</span><br>    <span class="hljs-keyword">if</span> (deleteNode.left != <span class="hljs-literal">null</span> || deleteNode.right != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 如果只有左孩子</span><br>        <span class="hljs-keyword">if</span> (deleteNode.right == <span class="hljs-literal">null</span>) &#123;<br>            deleteNode.left.color = Color.BLACK;<br>            deleteNode.left.parent = deleteNode.parent;<br>            <span class="hljs-keyword">if</span> (deleteNode.parent == <span class="hljs-literal">null</span>) &#123;<br>                root = deleteNode.left;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (deleteNode == deleteNode.parent.left) &#123;<br>                deleteNode.parent.left = deleteNode.left;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                deleteNode.parent.right = deleteNode.left;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 如果只有右孩子</span><br>            deleteNode.right.color = Color.BLACK;<br>            deleteNode.right.parent = deleteNode.parent;<br>            <span class="hljs-keyword">if</span> (deleteNode.parent == <span class="hljs-literal">null</span>) &#123;<br>                root = deleteNode.right;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (deleteNode == deleteNode.parent.left) &#123;<br>                deleteNode.parent.left = deleteNode.right;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                deleteNode.parent.right = deleteNode.right;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 局面RedNone</span><br>    <span class="hljs-keyword">if</span> (deleteNode.color == Color.RED) &#123;<br>        <span class="hljs-keyword">if</span> (deleteNode.parent == <span class="hljs-literal">null</span>) &#123;<br>            root = <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (deleteNode == deleteNode.parent.left) &#123;<br>                deleteNode.parent.left = <span class="hljs-literal">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                deleteNode.parent.right = <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 局面BlackNone</span><br>    <span class="hljs-keyword">if</span> (deleteNode.parent == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 特判：如果黑节点就是根节点，则删除后整棵树变成空树</span><br>        root = <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 黑节点不是根节点的情形</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> deleteNode.parent;<br>        Node sibling;<br>        <span class="hljs-keyword">if</span> (deleteNode == deleteNode.parent.left) &#123;<br>            sibling = deleteNode.parent.right;<br>            deleteNode.parent.left = <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            sibling = deleteNode.parent.left;<br>            deleteNode.parent.right = <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 分支BlackNone-Red：兄节点是红色</span><br>        <span class="hljs-keyword">if</span> (sibling.color == Color.RED) &#123;<br>            sibling.color = Color.BLACK;<br>            parent.color = Color.RED;<br>            <span class="hljs-keyword">if</span> (sibling == parent.left) &#123;<br>                rightRotate(parent);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                leftRotate(parent);<br>            &#125;<br>            <span class="hljs-comment">// 继续考察双黑叶子节点(注意，此时该双黑叶子节点的兄弟节点必定是无子黑色节点)</span><br>            <span class="hljs-keyword">if</span> (parent.left == <span class="hljs-literal">null</span>) &#123;<br>                parent.right.color = Color.RED;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                parent.left.color = Color.RED;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (parent.color == Color.RED) &#123;<br>                parent.color = Color.BLACK;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            fixDelete(parent);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 分支BlackNone-Black-Black：兄节点没有红色孩子</span><br>        <span class="hljs-keyword">if</span> ((sibling.left == <span class="hljs-literal">null</span> || sibling.left.color == Color.BLACK) &amp;&amp; (sibling.right == <span class="hljs-literal">null</span> ||sibling.right.color == Color.BLACK)) &#123;<br>            sibling.color = Color.RED;<br>            <span class="hljs-comment">// 双黑上移</span><br>            <span class="hljs-keyword">if</span> (parent.color == Color.RED) &#123;<br>                parent.color = Color.BLACK;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// parent.color = Color.DOUBLEBLACK; 实际上不用引入DOUBLEBLACK这个颜色，因为只有黑色双黑才需要调用fixDelete()方法</span><br>                fixDelete(parent);<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 分支BlackNone-Black-Red-：兄节点有红色孩子</span><br>        <span class="hljs-keyword">if</span> (sibling == parent.left) &#123; <span class="hljs-comment">// 兄节点是左边</span><br>            <span class="hljs-keyword">if</span> (sibling.left != <span class="hljs-literal">null</span> &amp;&amp; sibling.left.color == Color.RED) &#123; <span class="hljs-comment">// 共线</span><br>                sibling.left.color = sibling.color;<br>                sibling.color = parent.color;<br>                parent.color = Color.BLACK;<br>                rightRotate(parent);<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 成角</span><br>                sibling.right.color = parent.color;<br>                parent.color = Color.BLACK;<br>                leftRotate(sibling);<br>                rightRotate(parent);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 兄节点在右边</span><br>            <span class="hljs-keyword">if</span> (sibling.left != <span class="hljs-literal">null</span> &amp;&amp; sibling.left.color == Color.RED) &#123; <span class="hljs-comment">// 成角</span><br>                sibling.left.color = parent.color;<br>                parent.color = Color.BLACK;<br>                rightRotate(sibling);<br>                leftRotate(parent);<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 共线</span><br>                sibling.right.color = sibling.color;<br>                sibling.color = parent.color;<br>                parent.color = Color.BLACK;<br>                leftRotate(parent);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) root.color = Color.BLACK;<br>&#125;<br><br><span class="hljs-comment">// 辅助方法：将删除无子节点后的树进行修复，传入的是待修复节点（双黑节点）</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fixDelete</span><span class="hljs-params">(Node fixNode)</span> &#123;<br>    <span class="hljs-keyword">if</span> (fixNode.parent == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 如果双黑节点是根节点，则双黑失效</span><br><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> fixNode.parent;<br>    Node sibling;<br>    <span class="hljs-keyword">if</span> (fixNode == fixNode.parent.left) &#123;<br>        sibling = fixNode.parent.right;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        sibling = fixNode.parent.left;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 兄弟节点有可能是黑的或红的</span><br>    <span class="hljs-comment">// 分支BlackNone-Red：兄节点是红色</span><br>    <span class="hljs-keyword">if</span> (sibling.color == Color.RED) &#123;<br>        sibling.color = Color.BLACK;<br>        parent.color = Color.RED;<br>        <span class="hljs-keyword">if</span> (sibling == parent.left) &#123;<br>            rightRotate(parent);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            leftRotate(parent);<br>        &#125;<br>        <span class="hljs-comment">// 继续考察双黑叶子节点(注意，此时该双黑叶子节点的兄弟节点必定是无子黑色节点)</span><br>        <span class="hljs-keyword">if</span> (parent.left == <span class="hljs-literal">null</span>) &#123;<br>            parent.right.color = Color.RED;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            parent.left.color = Color.RED;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (parent.color == Color.RED) &#123;<br>            parent.color = Color.BLACK;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        fixDelete(parent);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 分支BlackNone-Black-Black：兄节点没有红色孩子</span><br>    <span class="hljs-keyword">if</span> ((sibling.left == <span class="hljs-literal">null</span> || sibling.left.color == Color.BLACK) &amp;&amp; (sibling.right == <span class="hljs-literal">null</span> ||sibling.right.color == Color.BLACK)) &#123;<br>        sibling.color = Color.RED;<br>        <span class="hljs-comment">// 双黑上移</span><br>        <span class="hljs-keyword">if</span> (parent.color == Color.RED) &#123;<br>            parent.color = Color.BLACK;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            fixDelete(parent);<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 分支BlackNone-Black-Red-：兄节点有红色孩子</span><br>    <span class="hljs-keyword">if</span> (sibling == parent.left) &#123; <span class="hljs-comment">// 兄节点是左边</span><br>        <span class="hljs-keyword">if</span> (sibling.left != <span class="hljs-literal">null</span> &amp;&amp; sibling.left.color == Color.RED) &#123; <span class="hljs-comment">// 共线</span><br>            sibling.left.color = sibling.color;<br>            sibling.color = parent.color;<br>            parent.color = Color.BLACK;<br>            rightRotate(parent);<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 成角</span><br>            sibling.right.color = parent.color;<br>            parent.color = Color.BLACK;<br>            leftRotate(sibling);<br>            rightRotate(parent);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 兄节点在右边</span><br>        <span class="hljs-keyword">if</span> (sibling.left != <span class="hljs-literal">null</span> &amp;&amp; sibling.left.color == Color.RED) &#123; <span class="hljs-comment">// 成角</span><br>            sibling.left.color = parent.color;<br>            parent.color = Color.BLACK;<br>            rightRotate(sibling);<br>            leftRotate(parent);<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 共线</span><br>            sibling.right.color = sibling.color;<br>            sibling.color = parent.color;<br>            parent.color = Color.BLACK;<br>            leftRotate(parent);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 辅助方法：查找以node为根的树的最小值</span><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">getMinimum</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-keyword">while</span> (node.left != <span class="hljs-literal">null</span>) &#123;<br>        node = node.left;<br>    &#125;<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br><br><span class="hljs-comment">// 辅助方法：将删除目标节点递归转化为删除无子节点或单子节点</span><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">problemConversion</span><span class="hljs-params">(Node targetNode)</span> &#123;<br>    <span class="hljs-comment">// 如果不够两个孩子</span><br>    <span class="hljs-keyword">if</span> (targetNode.left == <span class="hljs-literal">null</span> || targetNode.right == <span class="hljs-literal">null</span>) &#123; <br>        <span class="hljs-keyword">return</span> targetNode;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果有两个孩子</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">successor</span> <span class="hljs-operator">=</span> getMinimum(targetNode.right);<br>    targetNode.val = successor.val;<br>    <span class="hljs-keyword">return</span> problemConversion(successor);<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p><strong>双黑节点何时能够消除？</strong></p><ul><li>双黑节点是根节点时，直接消除双黑效果。</li><li>双黑节点是红色节点时，会与红色节点“中和”，消除双黑效果，同时红色节点变为黑色节点。</li><li>双黑节点的兄节点是叶子节点时，直接消除双黑效果。(此时双黑节点本身也必定是叶子节点)</li></ul>          </div><p>  总结一下红黑树的删除操作，需要考虑的有如下情况： <pre><code class=" mermaid">graph TBA(开始) --&gt; B&#123;&quot;递归转化？&quot;&#125;B --&gt; |删除&lt;p&gt;单子节点| C[&quot;局面1：&lt;p&gt;OneKid&quot;]B --&gt; |删除&lt;p&gt;无子节点| D&#123;&quot;删除节点&lt;p&gt;的颜色？&quot;&#125;D --&gt; |删除&lt;p&gt;红节点| E[&quot;局面2-1：&lt;p&gt;RedNone&quot;]D --&gt; |删除&lt;p&gt;黑节点| F&#123;&quot;兄节点&lt;p&gt;颜色？&quot;&#125;F --&gt; |兄节点&lt;p&gt;为黑| H&#123;&quot;侄节点&lt;p&gt;颜色？&quot;&#125;H --&gt; |侄节点&lt;p&gt;有红| J&#123;&quot;父兄侄&lt;p&gt;位置关系？&quot;&#125;J --&gt; |父兄侄&lt;p&gt;共线| K[&quot;局面&lt;p&gt;2-2-1-2-1-a：&lt;p&gt;BlackNone-Black-Red-Line&quot;]J --&gt; |父兄侄&lt;p&gt;成角| L[&quot;局面&lt;p&gt;2-2-1-2-1-b：&lt;p&gt;BlackNone-Black-Red-Angle&quot;]H --&gt; |侄节点&lt;p&gt;全黑| I[&quot;局面&lt;p&gt;2-2-1-2：&lt;p&gt;BlackNone-Black-Black&quot;]F --&gt; |兄节点&lt;p&gt;为红| G[&quot;局面&lt;p&gt;2-2-2：&lt;p&gt;BlackNone-Red&quot;]</code></pre></p><h3 id="实例红黑树的删除">实例：红黑树的删除</h3><div class="note note-success">            <strong>演示：删除红黑树</strong><figure><img src="/../img/redBlackTree/originalRBT.png" height=260px></figure><p>  给定如图所示的红黑树，按照序列<code>deleteArray = {18, 25, 15, 6, 13, 37, 27, 17, 34, 9, 10, 23}</code>的顺序依次删除元素。<br /></p><ol start="0" type="1"><li>删除元素 <span class="math inline">\(18\)</span> 时，由于节点 <spanclass="math inline">\(18\)</span>拥有两个孩子，所以需要找到其直接后继（右子树中的节点 <spanclass="math inline">\(23\)</span>），将 <spanclass="math inline">\(23\)</span> 赋值给节点 <spanclass="math inline">\(18\)</span>（保持节点颜色不变），然后问题转化为删除原本的节点<span class="math inline">\(23\)</span>。节点 <spanclass="math inline">\(23\)</span>只有右孩子，因此直接用其右孩子替代即可，并且替代之后节点要变成黑色。<figure><img src="/../img/redBlackTree/removeEle18.png" height=360px></figure></li><li>删除元素 <span class="math inline">\(25\)</span> 时，由于节点 <spanclass="math inline">\(25\)</span>是无子黑色节点，所以先删除得到双黑叶子节点。然后，由于兄节点 <spanclass="math inline">\(34\)</span>是只有一个红孩子的黑色节点，并且构成“父兄侄共线”布局，因此先把侄节点<span class="math inline">\(37\)</span>变成兄节点的颜色（黑色），然后把兄节点 <spanclass="math inline">\(34\)</span> 变成父节点的颜色（红色），然后把父节点<span class="math inline">\(27\)</span>变为黑色，然后旋转父节点。由于旋转完毕后，双黑叶子节点的兄节点也变成了叶子节点，所以双黑失效，调整完毕。<figure><img src="/../img/redBlackTree/removeEle25.png" height=340px></figure></li><li>删除元素 <span class="math inline">\(15\)</span> 时，由于节点 <spanclass="math inline">\(15\)</span> 具有两个孩子，所以先找到其直接后继<span class="math inline">\(17\)</span>并赋值。问题就转化为删除原本的无子黑色节点 <spanclass="math inline">\(17\)</span>，得到双黑叶子节点。由于兄节点 <spanclass="math inline">\(34\)</span> 是红色节点，所以把兄节点 <spanclass="math inline">\(34\)</span> 和父节点 <spanclass="math inline">\(23\)</span> 都反色，然后旋转父节点 <spanclass="math inline">\(23\)</span>。旋转完毕后，双黑叶子节点的兄节点变为无子黑色节点<spanclass="math inline">\(27\)</span>，所以双黑仍然有效，需要继续调整。先把兄节点<span class="math inline">\(27\)</span>反色为红色，同时双黑效果向上转移到父节点（红色节点 <spanclass="math inline">\(23\)</span>），于是红色与双黑中和成为普通黑色节点，调整完毕。<figure><img src="/../img/redBlackTree/removeEle15.png" height=640px></figure></li><li>删除元素 <span class="math inline">\(6\)</span> 时，由于节点 <spanclass="math inline">\(6\)</span>是无子黑色节点，所以先删除得到双黑叶子节点。然后，由于兄节点 <spanclass="math inline">\(13\)</span>是只有一个红孩子的黑色节点，并且构成“父兄侄成角”布局，因此先把侄节点<span class="math inline">\(10\)</span> 变成父节点 <spanclass="math inline">\(9\)</span> 的颜色，把父节点 <spanclass="math inline">\(9\)</span> 变成黑色，然后旋转兄节点 <spanclass="math inline">\(13\)</span> 再旋转父节点 <spanclass="math inline">\(9\)</span>。旋转完毕后，双黑叶子节点的兄节点也变成了叶子节点，所以双黑失效，调整完毕。<figure><img src="/../img/redBlackTree/removeEle6.png" height=540px></figure></li><li>删除元素 <span class="math inline">\(13\)</span> 时，由于节点 <spanclass="math inline">\(13\)</span>是无子黑色节点，所以先删除得到双黑叶子节点。然后，由于兄节点 <spanclass="math inline">\(9\)</span> 是无子黑节点，所以把兄弟节点 <spanclass="math inline">\(9\)</span>变为红色，同时“双黑”效果向上转移到父节点（黑色节点 <spanclass="math inline">\(10\)</span>）。继续考察双黑节点 <spanclass="math inline">\(10\)</span>，其兄弟节点 <spanclass="math inline">\(34\)</span>是没有红孩子的黑色节点，所以兄弟节点变为红色，同时双黑效果上移到节点<span class="math inline">\(17\)</span>。由于节点 <spanclass="math inline">\(17\)</span> 是根节点，所以双黑失效，调整完毕。<figure><img src="/../img/redBlackTree/removeEle13.png" height=540px></figure></li><li>删除元素 <span class="math inline">\(37\)</span> 时，由于节点 <spanclass="math inline">\(37\)</span>是无子黑色节点，所以删除得到双黑叶子节点。然后，由于兄节点 <spanclass="math inline">\(23\)</span>具有红孩子并且构成“父兄侄成角”布局，所以先把侄节点 <spanclass="math inline">\(27\)</span> 染成父节点 <spanclass="math inline">\(34\)</span> 的红色，然后把父节点 <spanclass="math inline">\(34\)</span> 染成黑色。接着旋转兄节点 <spanclass="math inline">\(23\)</span>，再旋转父节点 <spanclass="math inline">\(34\)</span>。旋转完毕后，双黑叶子节点的兄节点变成了叶子节点，双黑失效，调整完毕。<figure><img src="/../img/redBlackTree/removeEle37.png" height=530px></figure></li><li>删除元素 <span class="math inline">\(27\)</span> 时，由于节点 <spanclass="math inline">\(27\)</span> 具有两个孩子，所以先找到其直接后继<spanclass="math inline">\(34\)</span>，问题转化为删除原本的无子黑色节点<span class="math inline">\(34\)</span>。删除节点 <spanclass="math inline">\(34\)</span>，得到双黑叶子节点。由于其兄节点 <spanclass="math inline">\(23\)</span> 是无子黑色节点，所以节点 <spanclass="math inline">\(23\)</span> 变为红色，同时双黑效果向上转移到父节点<span class="math inline">\(34\)</span>，与红色节点 <spanclass="math inline">\(34\)</span> 发生中和而失效，同时节点 <spanclass="math inline">\(34\)</span> 变为黑色。调整完毕。<figure><img src="/../img/redBlackTree/removeEle27.png" height=500px></figure></li><li>删除元素 <span class="math inline">\(17\)</span> 时，由于节点 <spanclass="math inline">\(17\)</span> 有两个孩子，所以先找到其直接后继 <spanclass="math inline">\(23\)</span>，问题转化为删除原本的无子红色节点<span class="math inline">\(23\)</span>。直接删除即可。<figure><img src="/../img/redBlackTree/removeEle17.png" height=320px></figure></li><li>删除元素 <span class="math inline">\(34\)</span> 时，由于节点 <spanclass="math inline">\(34\)</span>是无子黑色节点，所以删除得到双黑叶子节点。兄弟节点 <spanclass="math inline">\(10\)</span>具有红孩子并且构成“父兄侄共线”布局，因此先把侄节点 <spanclass="math inline">\(9\)</span> 染成兄节点的黑色，然后把兄节点 <spanclass="math inline">\(10\)</span> 染成父节点的黑色，再把父节点 <spanclass="math inline">\(13\)</span> 染成黑色。然后，旋转父节点 <spanclass="math inline">\(13\)</span>，旋转完毕后双黑叶子节点的兄节点变成了叶子节点，双黑失效，调整完毕。<figure><img src="/../img/redBlackTree/removeEle34.png" height=320px></figure></li><li>删除元素 <span class="math inline">\(9\)</span> 时，由于节点 <spanclass="math inline">\(9\)</span>是无子黑色节点，所以删除得到双黑叶子节点。兄节点 <spanclass="math inline">\(23\)</span>是无子黑色节点，所以兄节点变红，同时双黑效果向上转移到父节点 <spanclass="math inline">\(10\)</span>。由于节点 <spanclass="math inline">\(10\)</span> 是根节点，所以双黑失效，调整完毕。<figure><img src="/../img/redBlackTree/removeEle9.png" height=120px></figure></li><li>删除元素 <span class="math inline">\(10\)</span> 时，由于节点 <spanclass="math inline">\(10\)</span> 只有一个孩子，所以直接用其孩子（节点<span class="math inline">\(23\)</span>）取代。然后，红色节点 <spanclass="math inline">\(23\)</span> 染成黑色即可。<figure><img src="/../img/redBlackTree/removeEle10.png" height=120px></figure></li><li>删除元素 <span class="math inline">\(23\)</span>时，由于这是整棵树中的唯一元素，所以直接删除，得到空树。<figure><img src="/../img/redBlackTree/removeEle23.png" height=80px></figure></li></ol>          </div><h2 id="红黑树的完整实现">红黑树的完整实现</h2><p>  可以发现，红黑树的插入操作需要考察的是祖节点、父节点、舅节点这“三代人”，形象地比作长辈；而删除操作需要考察父节点、兄节点、侄节点这“三代人”，类似可以比作小辈。<br />  综合前面对于红黑树的定义、查找、旋转、插入和删除这些基本功能模块，现将完整的实现代码张贴如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">RedBlackTree</span> <span class="hljs-variable">rbt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedBlackTree</span>();<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;Enter number of elements to insert:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            rbt.insert(sc.nextInt());<br>        &#125;<br><br>        rbt.printTree();<br><br>        System.out.println(<span class="hljs-string">&quot;Enter element to delete:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">del</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        rbt.delete(del);<br><br>        rbt.printTree();<br><br>        sc.close();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义红黑树类，其内部类定义为红黑节点</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedBlackTree</span> &#123;<br>    <span class="hljs-keyword">private</span> Node root;<br><br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<br>        RED,<br>        BLACK,<br>    &#125;<br><br>    <span class="hljs-comment">// 红黑节点包含成员变量：值、颜色、左孩子、右孩子、父节点</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-type">int</span> val;<br>        Color color;<br>        Node left;<br>        Node right;<br>        Node parent;<br><br>        Node(<span class="hljs-type">int</span> val) &#123;<br>            <span class="hljs-built_in">this</span>.val = val;<br>            <span class="hljs-built_in">this</span>.color = Color.RED; <span class="hljs-comment">// 新节点默认红色，可以最大程度减小调整工作量</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 左旋和右旋。注意，由于如果涉及根节点变动时，会把root更新，所以root始终是树的真实根节点。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">leftRotate</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> node.right;<br>    <br>        <span class="hljs-comment">// Step 1：用该节点右孩子的左孩子去成为该节点新的右孩子</span><br>        node.right = temp.left;<br>        <span class="hljs-keyword">if</span> (temp.left != <span class="hljs-literal">null</span>) &#123;<br>            temp.left.parent = node;<br>        &#125;<br>    <br>        <span class="hljs-comment">// Step 2：用该节点原本的右孩子取代该节点原本的位置</span><br>        temp.parent = node.parent;<br>        <span class="hljs-keyword">if</span> (node.parent == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// Case 1：node原本为根节点，则左旋之后的新根节点变为temp</span><br>            root = temp;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node == node.parent.left) &#123; <span class="hljs-comment">// Case 2&amp;3：node不是根节点，则左旋不会影响树的根节点</span><br>            node.parent.left = temp;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            node.parent.right = temp;<br>        &#125;<br>    <br>        <span class="hljs-comment">// Step 3：用该节点成为其原本右孩子的左孩子</span><br>        temp.left = node;<br>        node.parent = temp;<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rightRotate</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> node.left;<br>    <br>        <span class="hljs-comment">// Step 1：用该节点左孩子的右孩子去成为该节点新的左孩子</span><br>        node.left = temp.right;<br>        <span class="hljs-keyword">if</span> (temp.right != <span class="hljs-literal">null</span>) &#123;<br>            temp.right.parent = node;<br>        &#125;<br>    <br>        <span class="hljs-comment">// Step 2：用该节点原本的左孩子取代该节点原本的位置</span><br>        temp.parent = node.parent;<br>        <span class="hljs-keyword">if</span> (node.parent == <span class="hljs-literal">null</span>) &#123;<br>            root = temp;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node == node.parent.right) &#123;<br>            node.parent.right = temp;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            node.parent.left = temp;<br>        &#125;<br>    <br>        <span class="hljs-comment">// Step 3：用该节点成为其原本左孩子的右孩子</span><br>        temp.right = node;<br>        node.parent = temp;<br>    &#125;<br><br>    <span class="hljs-comment">// 插入新元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(val);<br>        root = bstInsert(root, newNode);<br>        fixInsert(newNode);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 辅助方法：二叉搜索树的插入，返回新树的根节点</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">bstInsert</span><span class="hljs-params">(Node root, Node newNode)</span> &#123;<br>        <span class="hljs-comment">// 递归终止条件：如果递归到空树，则当前位置就是目标位置</span><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> newNode;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 否则，执行二叉搜索树的插入逻辑</span><br>        <span class="hljs-keyword">if</span> (newNode.val &lt; root.val) &#123;<br>            root.left = bstInsert(root.left, newNode);<br>            root.left.parent = root;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newNode.val &gt; root.val) &#123;<br>            root.right = bstInsert(root.right, newNode);<br>            root.right.parent = root;<br>        &#125;<br>    <br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 辅助方法：调整红黑树</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fixInsert</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-comment">// 只要当前节点不是根节点，并且当前节点的父节点是红色</span><br>        <span class="hljs-keyword">while</span> (node != root &amp;&amp; node.parent.color == Color.RED) &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> node.parent;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">grandparent</span> <span class="hljs-operator">=</span> parent.parent;<br>    <br>            <span class="hljs-comment">// Branch 1：父节点是祖节点的左孩子</span><br>            <span class="hljs-keyword">if</span> (parent == grandparent.left) &#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">uncle</span> <span class="hljs-operator">=</span> grandparent.right;<br>    <br>                <span class="hljs-keyword">if</span> (uncle != <span class="hljs-literal">null</span> &amp;&amp; uncle.color == Color.RED) &#123;<br>                    <span class="hljs-comment">// Case 1: 三红连珠。祖节点、父节点、舅节点全部反色，然后把祖节点看作新节点继续考察</span><br>                    parent.color = Color.BLACK;<br>                    uncle.color = Color.BLACK;<br>                    grandparent.color = Color.RED;<br>                    node = grandparent;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (node == parent.right) &#123;<br>                        <span class="hljs-comment">// Case 2：三代成角。父节点左旋，转化成Case 3。</span><br>                        leftRotate(parent);<br>                        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> parent;<br>                        parent = node;<br>                        node = temp;<br>                    &#125;<br>                    <span class="hljs-comment">// Case 3：三代共线。祖节点和父节点反色，祖节点右旋。</span><br>                    parent.color = Color.BLACK;<br>                    grandparent.color = Color.RED;<br>                    rightRotate(grandparent);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// Branch 2：父节点是祖节点的右孩子</span><br>                <span class="hljs-type">Node</span> <span class="hljs-variable">uncle</span> <span class="hljs-operator">=</span> grandparent.left;<br>    <br>                <span class="hljs-keyword">if</span> (uncle != <span class="hljs-literal">null</span> &amp;&amp; uncle.color == Color.RED) &#123;<br>                    <span class="hljs-comment">// Case 1: 三红连珠。祖节点、父节点、舅节点全部反色，然后把祖节点看作新节点继续考察</span><br>                    parent.color = Color.BLACK;<br>                    uncle.color = Color.BLACK;<br>                    grandparent.color = Color.RED;<br>                    node = grandparent;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (node == parent.left) &#123;<br>                        <span class="hljs-comment">// Case 2：三代成角。父节点右旋，转化成Case 3。</span><br>                        rightRotate(parent);<br>                        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> parent;<br>                        parent = node;<br>                        node = temp;<br>                    &#125;<br>                    <span class="hljs-comment">// Case 3：三代共线。祖节点和父节点反色，祖节点左旋。</span><br>                    parent.color = Color.BLACK;<br>                    grandparent.color = Color.RED;<br>                    leftRotate(grandparent);<br>                &#125;<br>            &#125;<br>        &#125;<br>    <br>        <span class="hljs-comment">// 最后把根节点固定成黑色</span><br>        root.color = Color.BLACK;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">targetNode</span> <span class="hljs-operator">=</span> search(root, val);<br>        <span class="hljs-keyword">if</span> (targetNode == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>    <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">deleteNode</span> <span class="hljs-operator">=</span> problemConversion(targetNode);<br>    <br>        <span class="hljs-comment">// 局面OneKid</span><br>        <span class="hljs-keyword">if</span> (deleteNode.left != <span class="hljs-literal">null</span> || deleteNode.right != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 如果只有左孩子</span><br>            <span class="hljs-keyword">if</span> (deleteNode.right == <span class="hljs-literal">null</span>) &#123;<br>                deleteNode.left.color = Color.BLACK;<br>                deleteNode.left.parent = deleteNode.parent;<br>                <span class="hljs-keyword">if</span> (deleteNode.parent == <span class="hljs-literal">null</span>) &#123;<br>                    root = deleteNode.left;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (deleteNode == deleteNode.parent.left) &#123;<br>                    deleteNode.parent.left = deleteNode.left;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    deleteNode.parent.right = deleteNode.left;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 如果只有右孩子</span><br>                deleteNode.right.color = Color.BLACK;<br>                deleteNode.right.parent = deleteNode.parent;<br>                <span class="hljs-keyword">if</span> (deleteNode.parent == <span class="hljs-literal">null</span>) &#123;<br>                    root = deleteNode.right;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (deleteNode == deleteNode.parent.left) &#123;<br>                    deleteNode.parent.left = deleteNode.right;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    deleteNode.parent.right = deleteNode.right;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    <br>        <span class="hljs-comment">// 局面RedNone</span><br>        <span class="hljs-keyword">if</span> (deleteNode.color == Color.RED) &#123;<br>            <span class="hljs-keyword">if</span> (deleteNode.parent == <span class="hljs-literal">null</span>) &#123;<br>                root = <span class="hljs-literal">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (deleteNode == deleteNode.parent.left) &#123;<br>                    deleteNode.parent.left = <span class="hljs-literal">null</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    deleteNode.parent.right = <span class="hljs-literal">null</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    <br>        <span class="hljs-comment">// 局面BlackNone</span><br>        <span class="hljs-keyword">if</span> (deleteNode.parent == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 特判：如果黑节点就是根节点，则删除后整棵树变成空树</span><br>            root = <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 黑节点不是根节点的情形</span><br>            <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> deleteNode.parent;<br>            Node sibling;<br>            <span class="hljs-keyword">if</span> (deleteNode == deleteNode.parent.left) &#123;<br>                sibling = deleteNode.parent.right;<br>                deleteNode.parent.left = <span class="hljs-literal">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                sibling = deleteNode.parent.left;<br>                deleteNode.parent.right = <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-comment">// 分支BlackNone-Red：兄节点是红色</span><br>            <span class="hljs-keyword">if</span> (sibling.color == Color.RED) &#123;<br>                sibling.color = Color.BLACK;<br>                parent.color = Color.RED;<br>                <span class="hljs-keyword">if</span> (sibling == parent.left) &#123;<br>                    rightRotate(parent);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    leftRotate(parent);<br>                &#125;<br>                <span class="hljs-comment">// 继续考察双黑叶子节点(注意，此时该双黑叶子节点的兄弟节点必定是无子黑色节点)</span><br>                <span class="hljs-keyword">if</span> (parent.left == <span class="hljs-literal">null</span>) &#123;<br>                    parent.right.color = Color.RED;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    parent.left.color = Color.RED;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (parent.color == Color.RED) &#123;<br>                    parent.color = Color.BLACK;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                fixDelete(parent);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <br>            <span class="hljs-comment">// 分支BlackNone-Black-Black：兄节点没有红色孩子</span><br>            <span class="hljs-keyword">if</span> ((sibling.left == <span class="hljs-literal">null</span> || sibling.left.color == Color.BLACK) &amp;&amp; (sibling.right == <span class="hljs-literal">null</span> ||sibling.right.color == Color.BLACK)) &#123;<br>                sibling.color = Color.RED;<br>                <span class="hljs-comment">// 双黑上移</span><br>                <span class="hljs-keyword">if</span> (parent.color == Color.RED) &#123;<br>                    parent.color = Color.BLACK;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// parent.color = Color.DOUBLEBLACK; 实际上不用引入DOUBLEBLACK这个颜色，因为只有双黑才需要调用fixDelete()方法</span><br>                    fixDelete(parent);<br>                &#125;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>    <br>            <span class="hljs-comment">// 分支BlackNone-Black-Red-：兄节点有红色孩子</span><br>            <span class="hljs-keyword">if</span> (sibling == parent.left) &#123; <span class="hljs-comment">// 兄节点是左边</span><br>                <span class="hljs-keyword">if</span> (sibling.left != <span class="hljs-literal">null</span> &amp;&amp; sibling.left.color == Color.RED) &#123; <span class="hljs-comment">// 共线</span><br>                    sibling.left.color = sibling.color;<br>                    sibling.color = parent.color;<br>                    parent.color = Color.BLACK;<br>                    rightRotate(parent);<br>                &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 成角</span><br>                    sibling.right.color = parent.color;<br>                    parent.color = Color.BLACK;<br>                    leftRotate(sibling);<br>                    rightRotate(parent);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 兄节点在右边</span><br>                <span class="hljs-keyword">if</span> (sibling.left != <span class="hljs-literal">null</span> &amp;&amp; sibling.left.color == Color.RED) &#123; <span class="hljs-comment">// 成角</span><br>                    sibling.left.color = parent.color;<br>                    parent.color = Color.BLACK;<br>                    rightRotate(sibling);<br>                    leftRotate(parent);<br>                &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 共线</span><br>                    sibling.right.color = sibling.color;<br>                    sibling.color = parent.color;<br>                    parent.color = Color.BLACK;<br>                    leftRotate(parent);<br>                &#125;<br>            &#125;<br>        &#125;<br>    <br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) root.color = Color.BLACK;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 辅助方法：将删除无子节点后的树进行修复，传入的是待修复节点（双黑节点）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fixDelete</span><span class="hljs-params">(Node fixNode)</span> &#123;<br>        <span class="hljs-keyword">if</span> (fixNode.parent == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 如果双黑节点是根节点，则双黑失效</span><br>    <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> fixNode.parent;<br>        Node sibling;<br>        <span class="hljs-keyword">if</span> (fixNode == fixNode.parent.left) &#123;<br>            sibling = fixNode.parent.right;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            sibling = fixNode.parent.left;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 兄弟节点有可能是黑的或红的</span><br>        <span class="hljs-comment">// 分支BlackNone-Red：兄节点是红色</span><br>        <span class="hljs-keyword">if</span> (sibling.color == Color.RED) &#123;<br>            sibling.color = Color.BLACK;<br>            parent.color = Color.RED;<br>            <span class="hljs-keyword">if</span> (sibling == parent.left) &#123;<br>                rightRotate(parent);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                leftRotate(parent);<br>            &#125;<br>            <span class="hljs-comment">// 继续考察双黑叶子节点(注意，此时该双黑叶子节点的兄弟节点必定是无子黑色节点)</span><br>            <span class="hljs-keyword">if</span> (parent.left == <span class="hljs-literal">null</span>) &#123;<br>                parent.right.color = Color.RED;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                parent.left.color = Color.RED;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (parent.color == Color.RED) &#123;<br>                parent.color = Color.BLACK;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            fixDelete(parent);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 分支BlackNone-Black-Black：兄节点没有红色孩子</span><br>        <span class="hljs-keyword">if</span> ((sibling.left == <span class="hljs-literal">null</span> || sibling.left.color == Color.BLACK) &amp;&amp; (sibling.right == <span class="hljs-literal">null</span> ||sibling.right.color == Color.BLACK)) &#123;<br>            sibling.color = Color.RED;<br>            <span class="hljs-comment">// 双黑上移</span><br>            <span class="hljs-keyword">if</span> (parent.color == Color.RED) &#123;<br>                parent.color = Color.BLACK;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// parent.color = Color.DOUBLEBLACK; 实际上不用引入DOUBLEBLACK这个颜色，因为只有双黑才需要调用fixDelete()方法</span><br>                fixDelete(parent);<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    <br>        <span class="hljs-comment">// 分支BlackNone-Black-Red-：兄节点有红色孩子</span><br>        <span class="hljs-keyword">if</span> (sibling == parent.left) &#123; <span class="hljs-comment">// 兄节点是左边</span><br>            <span class="hljs-keyword">if</span> (sibling.left != <span class="hljs-literal">null</span> &amp;&amp; sibling.left.color == Color.RED) &#123; <span class="hljs-comment">// 共线</span><br>                sibling.left.color = sibling.color;<br>                sibling.color = parent.color;<br>                parent.color = Color.BLACK;<br>                rightRotate(parent);<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 成角</span><br>                sibling.right.color = parent.color;<br>                parent.color = Color.BLACK;<br>                leftRotate(sibling);<br>                rightRotate(parent);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 兄节点在右边</span><br>            <span class="hljs-keyword">if</span> (sibling.left != <span class="hljs-literal">null</span> &amp;&amp; sibling.left.color == Color.RED) &#123; <span class="hljs-comment">// 成角</span><br>                sibling.left.color = parent.color;<br>                parent.color = Color.BLACK;<br>                rightRotate(sibling);<br>                leftRotate(parent);<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 共线</span><br>                sibling.right.color = sibling.color;<br>                sibling.color = parent.color;<br>                parent.color = Color.BLACK;<br>                leftRotate(parent);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 辅助方法：查找目标节点</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">search</span><span class="hljs-params">(Node root, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span> || root.val == val) &#123;<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (val &lt; root.val) &#123;<br>            <span class="hljs-keyword">return</span> search(root.left, val);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> search(root.right, val);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 辅助方法：查找以node为根的树的最小值</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">getMinimum</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">while</span> (node.left != <span class="hljs-literal">null</span>) &#123;<br>            node = node.left;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 辅助方法：将删除目标节点递归转化为删除无子节点或单子节点</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">problemConversion</span><span class="hljs-params">(Node targetNode)</span> &#123;<br>        <span class="hljs-comment">// 如果不够两个孩子</span><br>        <span class="hljs-keyword">if</span> (targetNode.left == <span class="hljs-literal">null</span> || targetNode.right == <span class="hljs-literal">null</span>) &#123; <br>            <span class="hljs-keyword">return</span> targetNode;<br>        &#125;<br>    <br>        <span class="hljs-comment">// 如果有两个孩子</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">successor</span> <span class="hljs-operator">=</span> getMinimum(targetNode.right);<br>        targetNode.val = successor.val;<br>        <span class="hljs-keyword">return</span> problemConversion(successor);<br>    &#125;<br><br>    <span class="hljs-comment">// 输出树的形状</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printTree</span><span class="hljs-params">()</span> &#123;<br>        printTree(root, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printTree</span><span class="hljs-params">(Node node, String indent, <span class="hljs-type">boolean</span> last)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            System.out.print(indent);<br>            <span class="hljs-keyword">if</span> (last) &#123;<br>                System.out.print(<span class="hljs-string">&quot;R----&quot;</span>);<br>                indent += <span class="hljs-string">&quot;   &quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.print(<span class="hljs-string">&quot;L----&quot;</span>);<br>                indent += <span class="hljs-string">&quot;|  &quot;</span>;<br>            &#125;<br>            System.out.println(node.val + <span class="hljs-string">&quot;(&quot;</span> + node.color + <span class="hljs-string">&quot;)&quot;</span>);<br>            printTree(node.left, indent, <span class="hljs-literal">false</span>);<br>            printTree(node.right, indent, <span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>technowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>高级数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法简明纲要</title>
    <link href="/2024/11/09/sortAlgorithms/"/>
    <url>/2024/11/09/sortAlgorithms/</url>
    
    <content type="html"><![CDATA[<p>  本文介绍了十大经典排序算法，并给出了Java版本的代码样例。<span id="more"></span> <div class="note note-info">            <p>  排序是算法的基础和入门问题。在介绍排序算法之前，需要明确一个概念：排序是指把原本无序的数组，重新按照元素由小到大的升序进行排列。<br />  经典的十种排序方法，按照时间复杂度大体可以分为三类：平方，线性对数，线性。</p>          </div></p><blockquote><p>平方时间复杂度——最简单原始的比较式排序思想</p></blockquote><h2 id="冒泡排序bubble-sort">冒泡排序（Bubble Sort）</h2><div class="note note-warning">            <p>  每遍历一次数组，都会使得最大的元素“上浮”到数组最右端，类似于气泡上浮的过程，因此得名“冒泡排序”。</p>          </div><h3 id="操作">操作</h3><ul><li>首先从数组的第一个元素开始到数组最后一个元素为止，对数组中相邻的两个元素进行比较，如果位于数组左端的元素大于数组右端的元素，则交换这两个元素在数组中的位置。这样操作后数组最右端的元素即为该数组中所有元素的最大值。</li><li>接着对该数组除最右端的 <span class="math inline">\(n-1\)</span>个元素进行同样的操作；</li><li>再接着对剩下的 <span class="math inline">\(n-2\)</span>个元素做同样的操作，直到整个数组有序排列。<br /></li></ul><h3 id="时空复杂度">时空复杂度</h3><p>  因为有两层循环，因此冒泡排序的平均时间复杂度为 <spanclass="math inline">\(O(n^{2})\)</span>。<br />  在最坏的情况（原数组为降序排列）下，时间复杂度为 <spanclass="math inline">\(O(n^{2})\)</span>；在最好的情况下，时间复杂度为<span class="math inline">\(O(n)\)</span>。<br />  由于只需要在交换元素时使用常数复杂度的额外空间，所以冒泡排序的空间复杂度为<span class="math inline">\(O(1)\)</span> 。<br /></p><h3 id="稳定性">稳定性</h3><p>  冒泡排序是稳定的。也就是说，对于值相同元素，排序前后其原本相对位置不会发生变化。<br /></p><h3 id="代码样例">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        bubbleSort(nums, N);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-keyword">while</span> (len != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] &gt; nums[i + <span class="hljs-number">1</span>]) &#123;<br>                    nums[i] ^= nums[i + <span class="hljs-number">1</span>];<br>                    nums[i + <span class="hljs-number">1</span>] ^= nums[i];<br>                    nums[i] ^= nums[i + <span class="hljs-number">1</span>];<br>                &#125;<br>            &#125;<br>            len--;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="选择排序selection-sort">选择排序（Selection Sort）</h2><div class="note note-warning">            <p>  每完成一轮遍历，都选出了数组中最小的元素放到数组最左端。因此得名“选择排序”。</p>          </div><h3 id="操作-1">操作</h3><ul><li>先从 <span class="math inline">\(n\)</span>个数字中找到最小值<code>min1</code>，如果最小值<code>min1</code>的位置不在数组的最左端（也就是<code>min1</code>不等于<code>nums[0]</code>），则将最小值<code>min1</code>和<code>nums[0]</code>交换；</li><li>接着在剩下的 <span class="math inline">\(n-1\)</span>个数字中找到最小值<code>min2</code>，如果最小值<code>min2</code>不是<code>nums[1]</code>，则交换这两个数字；</li><li>以此类推，直到数组<code>nums</code>有序排列。<br /></li></ul><h3 id="时空复杂度-1">时空复杂度</h3><p>  由于有两层循环，因此选择排序的平均时间复杂度为 <spanclass="math inline">\(O(n^{2})\)</span>。可知数据规模越小越好。<br />  在最坏和最好的的情况下，选择排序的时间复杂度都为 <spanclass="math inline">\(O(n^{2})\)</span>。<br />  由于只需要在交换元素时使用常数复杂度的额外空间，所以选择排序的空间复杂度为<span class="math inline">\(O(1)\)</span>。<br /></p><h3 id="稳定性-1">稳定性</h3><p>  选择排序是不稳定的。<br /></p><h3 id="代码样例-1">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        selectionSort(nums, N);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; len; j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[j] &lt; nums[minIndex]) &#123;<br>                    minIndex = j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (minIndex != i) &#123;<br>                nums[minIndex] ^= nums[i];<br>                nums[i] ^= nums[minIndex];<br>                nums[minIndex] ^= nums[i];<br>            &#125;<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入排序insertion-sort">插入排序（Insertion Sort）</h2><div class="note note-warning">            <p>  每次给“无序”序列的首元素在“有序”序列中寻找位置并插入的过程，类似于扑克牌构建牌型，得名“插入排序”。</p>          </div><h3 id="操作-2">操作</h3><p>  通过构建有序序列，对于未排序数据，在已排序序列中<strong>从后向前</strong>扫描，找到相应位置并插入。</p><ul><li>认为<code>nums[0]</code>是有序的，而后续所有元素处于无序状态。从<code>nums[1]</code>开始，从后往前与有序序列比较，找到合适的位置插入。有序序列长度+1。</li><li>依次处理<code>nums[2]</code>、<code>nums[3]</code>、···，直到最后一个元素。</li></ul><h3 id="时空复杂度-2">时空复杂度</h3><p>  由于每次给“无序”序列中的首元素在“有序”序列中找位置并插入都需要对“有序”数组进行遍历，所以相当于外层遍历无序数组而内层遍历有序数组，因此插入排序的时间复杂度为<span class="math inline">\(O(n^{2})\)</span>。<br />  在最坏的情况下，时间复杂度为 <spanclass="math inline">\(O(n^{2})\)</span>；在最好的情况下，时间复杂度优化为<span class="math inline">\(O(n)\)</span>。<br />  由于每轮遍历只需要用常数复杂度的额外空间记录插入元素，因此插入排序的空间复杂度为<span class="math inline">\(O(1)\)</span>。<br /></p><h3 id="代码样例-2">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        insertionSort(nums, N);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-comment">// 遍历无序序列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i - <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> nums[i];<br>            <span class="hljs-comment">// 拿无序元素从后往前与有序元素比较，在合适的位置插入</span><br>            <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; key &lt; nums[j]) &#123;<br>                nums[j + <span class="hljs-number">1</span>] = nums[j];<br>                j--;<br>            &#125;<br>            nums[j + <span class="hljs-number">1</span>] = key;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="希尔排序shells-sort插入排序的升级版">希尔排序（Shell'sSort）——插入排序的升级版</h2><h3 id="操作-3">操作</h3><p>  先将待排序列分割成为若干子序列分别进行插入排序，待整个序列中的记录"基本有序"时，再对全体进行一次直接插入排序。<br />  也就是说，选定一组降序<code>gap</code>序列，其最后一个元素为1，每一轮都对数组进行分组插入排序。随着<code>gap</code>值越来越小，数组越来越接近有序。最后<code>gap = 1</code>，即插入排序，此时效率非常高。<br /></p><h3 id="时间复杂度">时间复杂度</h3><p>  希尔排序的时间复杂度随<code>gap</code>序列的选择而有所差异。当<span class="math inline">\(n\rightarrow\infty\)</span>时，时间复杂度趋于 <span class="math inline">\(O(n (\logn)^{2})\)</span>。<br />  希尔排序虽然是插入排序的优化，但其效率只略低于快速排序和堆排序，而显著高于插入排序（插入排序效率又远高于冒泡排序）。</p><h3 id="稳定性-2">稳定性</h3><p>  希尔排序是不稳定的。<br /></p><h3 id="代码样例-3">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        shellsSort(nums, N);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shellsSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">increasement</span> <span class="hljs-operator">=</span> len;<br>        <span class="hljs-comment">// 最外层循环控制增量</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            increasement = increasement / <span class="hljs-number">3</span> + <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 外层for循环用于遍历每一组的首元素，即生成每一组</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; increasement; i++) &#123;<br>                <span class="hljs-comment">// 内层for循环用于对每一组进行插入排序</span><br>                <span class="hljs-comment">// 以下循环当increasement = 1时就是插入排序的代码。</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + increasement; j &lt; len; j += increasement) &#123;<br>                    <span class="hljs-keyword">if</span> (nums[j] &lt; nums[j - increasement]) &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> j - increasement;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> nums[j];<br>                        <span class="hljs-keyword">while</span> (k &gt;= <span class="hljs-number">0</span> &amp;&amp; key &lt; nums[k]) &#123;<br>                            nums[k + increasement] = nums[k];<br>                            k -= increasement;<br>                        &#125;<br>                        nums[k + increasement] = key;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> (increasement &gt; <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>线性对数时间复杂度——引入分治思想的比较式排序</p></blockquote><h2 id="归并排序merge-sort">归并排序（Merge Sort）</h2><div class="note note-warning">            <p>  采用先分再合的思想，因此得名“归并排序”。</p>          </div><h3 id="操作-4">操作</h3><p>  首先把长度为 <span class="math inline">\(n\)</span>的输入序列分成两个长度为 <spanclass="math inline">\(\dfrac{n}{2}\)</span>的子序列；然后对这两个子序列分别采用归并排序；最终将两个排序好的子序列合并成一个最终的排序序列。<br /></p><h3 id="时空复杂度-3">时空复杂度</h3><p>  由于采用了分治思想（二分），所以平均时间复杂度为 <spanclass="math inline">\(O(n\log n)\)</span>。<br />  在最好和最坏情况下，归并排序的时间复杂度都是 <spanclass="math inline">\(O(n\log n)\)</span>。<br />  需要使用与原始数组相同大小的额外空间，所以空间复杂度为 <spanclass="math inline">\(O(n)\)</span>。<br /></p><h3 id="稳定性-3">稳定性</h3><p>  归并排序是稳定的。<br /></p><h3 id="代码样例-4">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        mergeSort(nums, <span class="hljs-number">0</span>, N - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>        <span class="hljs-keyword">if</span> (start &gt;= end) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">// 递归方法处理</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (start + end) &gt;&gt; <span class="hljs-number">1</span>;<br>        mergeSort(nums, start, mid);<br>        mergeSort(nums, mid + <span class="hljs-number">1</span>, end);<br>        <br>        <span class="hljs-comment">// 合并两个已经分别排好序的数组</span><br>        <span class="hljs-type">int</span>[] temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[end - start + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i_start</span> <span class="hljs-operator">=</span> start, i_end = mid;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j_start</span> <span class="hljs-operator">=</span> mid + <span class="hljs-number">1</span>, j_end = end;<br>        <span class="hljs-comment">// 比较两个数组的首元素，按升序填入临时数组</span><br>        <span class="hljs-keyword">while</span> (i_start &lt;= i_end &amp;&amp; j_start &lt;= j_end) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i_start] &lt; nums[j_start]) &#123;<br>                temp[k] = nums[i_start];<br>                i_start++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                temp[k] = nums[j_start];<br>                j_start++;<br>            &#125;<br>            k++;<br>        &#125;<br>        <span class="hljs-comment">// 一般而言两个数组长度不同，所以总有一个会剩下一部分元素，直接补在temp后面</span><br>        <span class="hljs-keyword">while</span> (i_start &lt;= i_end) &#123;<br>            temp[k] = nums[i_start];<br>            i_start++;<br>            k++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (j_start &lt;= j_end) &#123;<br>            temp[k] = nums[j_start];<br>            j_start++;<br>            k++;<br>        &#125;<br>        <span class="hljs-comment">// 把temp的结果放回原数组nums</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            nums[i + start] = temp[i];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="快速排序quick-sort">快速排序（Quick Sort）</h2><div class="note note-warning">            <p>  “快速排序”，顾名思义，其速度比同等复杂度的其他排序算法都快！</p>          </div><h3 id="操作-5">操作</h3><p>  通过一趟排序将待排数据分割成独立的两部分，其中一部分数据均比另一部分数据小，则可分别对这两部分数据继续进行排序，从而达到整个序列有序。<br />  一趟快速排序的具体过程可描述为：从待排序列中任意选取一个数据（通常选取第一个数据）作为基准值，然后将序列中比它小的数据都安置在它的位置之前，将比它大的数据都安置在它的位置之后。这样，以该基准值为分界线，将待排序列分成的两个子序列。<br />  递归处理这两段子序列。</p><h3 id="时空复杂度-4">时空复杂度</h3><p>  由于使用了二分思想，快速排序的时间复杂度为 <spanclass="math inline">\(O(n\logn)\)</span>。是排序大数据的最快方法之一。<br />  在最好的情况下，快速排序的时间复杂度为 <span class="math inline">\(O(n\log n)\)</span>；但在最坏的情况下时间复杂度会退化为 <spanclass="math inline">\(O(n^{2})\)</span>。<br />  由于递归造成的栈空间使用，需要递归 <span class="math inline">\(\logn\)</span> 次则快速排序的平均空间复杂度为 <spanclass="math inline">\(O(\log n)\)</span>。<br /></p><h3 id="稳定性-4">稳定性</h3><p>  快速排序是不稳定的。</p><h3 id="代码样例-5">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        quickSort(nums, <span class="hljs-number">0</span>, N - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>        <span class="hljs-keyword">if</span> (start &gt;= end) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> nums[start];<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start, j = end;<br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            <span class="hljs-comment">// 从右向左寻找比pivot小的数</span><br>            <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; nums[j] &gt;= pivot) j--;<br>            <span class="hljs-keyword">if</span> (i &lt; j) &#123; <span class="hljs-comment">// 如果找到了，就把这个数放到左边</span><br>                nums[i] = nums[j];<br>                i++;<br>            &#125;<br>            <br>            <span class="hljs-comment">// 从左往右寻找比pivot大的数</span><br>            <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; nums[i] &lt; pivot) i++;<br>            <span class="hljs-keyword">if</span> (i &lt; j) &#123; <span class="hljs-comment">// 如果找到了，就把这个数放到右边</span><br>                nums[j] = nums[i];<br>                j--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 外层while循环会当i == j时终止。一轮之后，基准值找到了位置</span><br>        nums[i] = pivot;<br>        <br>        <span class="hljs-comment">// 递归处理两边的子数组</span><br>        quickSort(nums, start, i - <span class="hljs-number">1</span>);<br>        quickSort(nums, i + <span class="hljs-number">1</span>, end);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="堆排序heap-sort选择排序的升级版">堆排序（HeapSort）——选择排序的升级版</h2><div class="note note-warning">            <p>  由于借助了堆这种数据结构，因此得名“堆排序”。</p>          </div><div class="note note-info">            <p><strong>堆</strong></p><p>  堆是一种完全二叉树，每个节点的值都大于等于（或者都小于等于）其子节点的值。前者称为大根堆，后者称为小根堆。<br />  排升序需要建立大根堆，排降序需要建立小根堆。<br /></p><p><strong>完全二叉树的父节点和子节点的索引之间的关系</strong></p><ul><li><code>parent = (child - 1) / 2;</code></li><li><code>left = parent * 2 + 1;</code></li><li><code>right = parent * 2 + 2;</code></li><li><code>right = left + 1;</code></li></ul><p><strong>上滤和下滤</strong></p><p>  以大根堆为例，对不符合堆序性的节点有上滤和下滤两种操作：</p><ul><li>上滤：节点与其父节点比较：若大于父节点，则交换，重复此过程直到根节点。</li><li>下滤：节点与其左右孩子中较大者比较：若小于孩子，则交换，重复此过程直到叶子节点。</li></ul><p>  上滤和下滤的时间复杂度都是 <span class="math inline">\(O(\logn)\)</span>。</p><p><strong>向下建堆法</strong></p><p>  按照数组顺序依次把新元素插入到完全二叉树的末尾，每插入一个元素都要对树进行上滤操作从而保证堆序性。当插入完所有元素后，就自然构成了堆。<br />  因为每次插入新元素都需要上滤，所以第 <spanclass="math inline">\(i\)</span> 层的单个节点的上滤次数最多为 <spanclass="math inline">\(i - 1\)</span>，而第 <spanclass="math inline">\(i\)</span> 层最多有 <spanclass="math inline">\(2^{i - 1}\)</span>个节点。经过数列求和计算出向下建堆法的时间复杂度为 <spanclass="math inline">\(O(n \log n)\)</span>。<br /><span class="math display">\[\sum_{i=2}^{h} 2^{i-1}(i-1)=O(n \logn)\]</span>，其中 <span class="math inline">\(h = \log n +1\)</span>。</p><p><strong>向上建堆法</strong></p><p>  首先把乱序数组直接建成完全二叉树，然后从最后一个非叶子节点开始进行下滤操作，直到把根节点操作完毕。由于是从下层开始调整，总能保证子树满足堆序性，所以最后调整完根节点后整棵树就满足了堆序性。<br />  因为先建好树再从下层开始调整，所以第 <spanclass="math inline">\(i\)</span> 层的单个节点的下滤次数最多为 <spanclass="math inline">\(h - i\)</span>，而第 <spanclass="math inline">\(i\)</span> 层最多有 <spanclass="math inline">\(2^{i - 1}\)</span>个节点。经过数列求和计算出向上建堆法的时间复杂度为 <spanclass="math inline">\(O(n)\)</span>。<br /><span class="math display">\[\sum_{i=1}^{h - 1}2^{i-1}(h-i)=O(n)\]</span>，其中 <span class="math inline">\(h = \log n+ 1\)</span>。</p><p><strong>优先队列</strong></p><p>  优先队列本质上就是堆。优先队列的入队和出队操作对应了下滤和上滤。<br />  以大根堆优先队列为例，无论入队顺序如何，每次出队元素必定是当前队列中的最大元素。<br /></p><ul><li>出队：直接弹出根节点，然后把最后一个元素补到根节点的空位，然后进行下滤操作从而保证堆序性。</li><li>入队：就是向下建堆过程，把新元素添加到最后一位，然后进行上滤操作从而保证堆序性。</li></ul>          </div><h3 id="操作-6">操作</h3><ul><li><p><strong>小根堆排升序</strong><br />把原始数组建成小根堆（升序优先队列），然后依次弹出根节点，则自然形成了升序序列。（需要额外数组空间用来放置弹出的元素）</p></li><li><p><strong>大根堆排升序</strong><br />考虑到空间复杂度，实际上更常用大根堆来排升序。具体实现方法如下：</p><ul><li>把原始数组建成大根堆；</li><li>把最后一个节点与根节点交换，此时认为新的末节点已经排好序（虽然还放在树里但不再参与后续操作），然后通过下滤操作调整堆；</li><li>把倒数第二个节点与根节点交换，重复上述操作；</li><li>重复上述操作，直到根节点也排好序。</li></ul><p>  经过上述操作后，整棵树的层序遍历就是升序数组。实际上整个流程是在原始数组上完成的，即完成操作后数组会自然排好序。</p></li></ul><h3 id="时空复杂度-5">时空复杂度</h3><p>  由于要遍历所有节点，同时每次都要重新调整堆（时间复杂度 <spanclass="math inline">\(O(\logn)\)</span>），因此堆排序在最好和最坏情况下的时间复杂度都是 <spanclass="math inline">\(O(n \log n)\)</span>。<br />  由于操作在原始数组上完成，不需要引入额外空间，因此空间复杂度为 <spanclass="math inline">\(O(1)\)</span>。</p><h3 id="稳定性-5">稳定性</h3><p>  堆排序是不稳定的。</p><h3 id="代码样例-6">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        heapSort(nums);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">// 首先向上建堆法把原始数组建成大根堆</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (nums.length - <span class="hljs-number">1</span> - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            heapify(nums, len, i);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 交换根节点和末元素，并重新构造堆</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> len - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];<br>            nums[<span class="hljs-number">0</span>] = nums[i];<br>            nums[i] = temp;<br>            heapify(nums, i, <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 建大根堆的函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> rootIdx)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">largeIdx</span> <span class="hljs-operator">=</span> rootIdx;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftIdx</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * rootIdx + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightIdx</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * rootIdx + <span class="hljs-number">2</span>;<br>        <br>        <span class="hljs-comment">// 如果孩子比父节点大，则记录下孩子的索引</span><br>        <span class="hljs-keyword">if</span> (leftIdx &lt; len &amp;&amp; nums[leftIdx] &gt; nums[largeIdx]) &#123;<br>            largeIdx = leftIdx;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (rightIdx &lt; len &amp;&amp; nums[rightIdx] &gt; nums[largeIdx]) &#123;<br>            largeIdx = rightIdx;<br>        &#125;<br>        <span class="hljs-comment">// 如果大值的索引不是父节点索引，表明需要交换父节点和子节点的值</span><br>        <span class="hljs-keyword">if</span> (largeIdx != rootIdx) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> nums[rootIdx];<br>            nums[rootIdx] = nums[largeIdx];<br>            nums[largeIdx] = temp;<br>            <span class="hljs-comment">// 父节点的值下滤了，继续操作该值</span><br>            heapify(nums, len, largeIdx);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>线性时间复杂度——非比较式排序</p></blockquote><h2 id="计数排序counting-sort">计数排序（Counting Sort）</h2><div class="note note-warning">            <p>  因为需要统计每个元素出现次数，因此得名“计数排序”。</p>          </div><h3 id="操作-7">操作</h3><p>  计数排序的思想是构建“数值-出现次数”的键值对，把原始数组的值作为辅助数组的索引，把相应数值的出现次数作为辅助数组的值，从而借助数组索引的有序性，通过一轮遍历辅助数组自然而然地完成排序。<br />  考虑到1.数据中出现负数以及空间浪费；2.数据中存在多个相同的数时算法不稳定这两个问题，需要对原始数据进行映射，并且用累计次数替代单个值出现次数（把相同值元素看作不同）。<br /></p><ul><li>首先找出待排序的数组中最大和最小的元素，把数据范围映射为数组索引；</li><li>计算统计数组<code>count[]</code>：统计原始数组中每个值为<code>num</code>的元素出现的次数作为<code>count[num - min]</code>；</li><li>计算累加数组<code>sumCount[]</code>：对所有的计数累加，<code>sumCount[i]</code>表示<code>count[0 ~ i]</code>之和；</li><li>反向填充目标数组<code>sortedArray[]</code>：倒序遍历<code>nums</code>，将元素<code>num</code>放在数组<code>sortedArray[]</code>的第<code>sumCount[num - min]</code>项，每放一个元素就将<code>sumCount[num - min]</code>减去1。</li></ul><h3 id="时空复杂度-6">时空复杂度</h3><p>  本质上是空间换时间。由于只需要单层遍历大小为 <spanclass="math inline">\(n\)</span> 的原始数组和大小为极差 <spanclass="math inline">\(m\)</span> 的辅助数组，所以计数排序的时间复杂度为<span class="math inline">\(O(n + m)\)</span>。<br />  计数排序是非比较排序，因此速度快于任何比较式排序。<br />  由于需要额外使用长度取决于数据极差的数组空间，因此计数排序的空间复杂度为<spanclass="math inline">\(O(m)\)</span>。如果原始数据的极差过大，则需要大量的速度和内存。</p><h3 id="稳定性-6">稳定性</h3><p>  计数排序原本是不稳定的，但把<code>count[]</code>改成<code>sumCount[]</code>就稳定了。</p><h3 id="代码样例-7">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        <span class="hljs-type">int</span>[] result = countingSort(nums);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(result[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] countingSort(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-comment">// 找出数组的最值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>], min = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &gt; max) max = nums[i];<br>            <span class="hljs-keyword">if</span> (nums[i] &lt; min) min = nums[i];<br>        &#125;<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> max - min + <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 统计元素出现次数</span><br>        <span class="hljs-type">int</span>[] count = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[len];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            count[nums[i] - min]++;<br>        &#125;<br>        <span class="hljs-comment">// 累加次数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; len; i++) &#123;<br>            count[i] += count[i - <span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-comment">// 反解出排好序的数组</span><br>        <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            result[--count[nums[i] - min]] = nums[i]; <br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="桶排序bucket-sort计数排序的升级版">桶排序（BucketSort）——计数排序的升级版</h2><div class="note note-warning">            <p>  把原始数据分散到一系列“桶”内，分别在桶内完成排序，从而整体有序。因此得名“桶排序”。</p>          </div><h3 id="操作-8">操作</h3><p>  桶排序假设原始数据均匀分布，则将这些数据均匀分配到多个桶中，每个桶内分别排序，最后把每个桶的数据拼接起来。为此，对于并不均匀的原始数据，需要通过函数映射使其均匀。<br /></p><ul><li>根据原始数据分布确定桶的大小和个数，设置一个链表数组当作空桶数组；</li><li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li><li>对每个不是空的桶进行排序。既可以使用其他排序方法，也可以递归桶排序；</li><li>从不是空的桶里把排好序的数据依次拼接起来。</li></ul><h3 id="时空复杂度-7">时空复杂度</h3><p>  由于桶排序需要单层遍历原始数组和所有桶，所以桶排序的时间复杂度为<span class="math inline">\(O(n + m)\)</span>。<br />  最坏的情况下，如果数据分布极不均匀（所有数据全部落到一个桶内），则时间复杂度为<span class="math inline">\(O(n^{2})\)</span>。<br />  由于需要额外使用长度为 <span class="math inline">\(m\)</span>的链表数组，并且所有桶的空位之和就是 <spanclass="math inline">\(n\)</span>, 因此桶排序的空间复杂度为 <spanclass="math inline">\(O(n + m)\)</span>。</p><h3 id="稳定性-7">稳定性</h3><p>  因为相等的元素必然落在同一个桶里并且保持入桶顺序，所以桶排序是稳定的。</p><h3 id="代码样例-8">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        bucketSort(nums);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bucketSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 递归终止条件</span><br>        <br>        <span class="hljs-comment">// 找出数组的最值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>], min = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &gt; max) max = nums[i];<br>            <span class="hljs-keyword">if</span> (nums[i] &lt; min) min = nums[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (max == min) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 如果桶里元素全部相同，直接返回</span><br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">bucketSize</span> <span class="hljs-operator">=</span> (max - min) / nums.length + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bucketNum</span> <span class="hljs-operator">=</span> (max - min) / bucketSize + <span class="hljs-number">1</span>;<br>        List&lt;Integer&gt;[] buckets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>[bucketNum];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bucketNum; i++) &#123;<br>            buckets[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        &#125;<br>        <br>        <span class="hljs-comment">// 遍历原始数组，把元素放进相应的桶中</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> (num - min) / bucketSize;<br>            buckets[index].add(num);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 在每个桶内分别排序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bucketNum; i++) &#123;<br>            <span class="hljs-comment">//buckets[i].sort(null);</span><br>            <span class="hljs-keyword">if</span> (buckets[i].size() &gt; <span class="hljs-number">0</span>) &#123;<br>                bucketSort(buckets[i].stream().mapToInt(x -&gt; x).toArray());<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 把各个桶里的元素依次放回原来的数组</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bucketNum; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : buckets[i]) &#123;<br>                nums[idx++] = j;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基数排序radix-sort桶排序的拓展">基数排序（RadixSort）——桶排序的拓展</h2><div class="note note-warning">            <p>  由于采用基数作为“桶”，所以得名“基数排序”。</p>          </div><h3 id="操作-9">操作</h3><p>  基数排序采用了编号为0~9的10个桶，从低位向高位依次进行桶排序。由于每个桶的大小都是1，所以免去了桶内排序。直到所有位次都排完序后，依次输出桶内结果就是有序数组。</p><ul><li>取得原始数组<code>nums</code>中的最大数，并取得位数 <spanclass="math inline">\(k\)</span>，这就是需要进行桶排序的轮数；</li><li>从最低位开始依据位上的数进行桶排序；</li><li>比较 <span class="math inline">\(k\)</span>轮，直至对最高位完成排序。</li></ul><h3 id="时空复杂度-8">时空复杂度</h3><p>  由于基数排序需要 <span class="math inline">\(k\)</span>轮遍历原始数据，所以基数排序的时间复杂度为 <spanclass="math inline">\(O(n \times k)\)</span>。<br />  最坏情况下，基数排序的时间复杂度仍为 <span class="math inline">\(O(n\times k)\)</span>。<br />  由于需要额外使用长度为 <span class="math inline">\(m\)</span>链表数组作为桶，并且所有桶的空位之和就是 <spanclass="math inline">\(n\)</span>, 因此基数排序的空间复杂度为 <spanclass="math inline">\(O(n + m)\)</span>。其中 <spanclass="math inline">\(m\)</span> 为基数也就是桶的个数，一般为10。</p><h3 id="稳定性-8">稳定性</h3><p>  基数排序是稳定的。</p><h3 id="代码样例-9">代码样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        radixSort(nums);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            System.out.print(nums[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">radixSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">// 找出数组中的最大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (num &gt; max) max = num;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 求出最大值的位数（0也要认为是1位数）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">digitLength</span> <span class="hljs-operator">=</span> (max + <span class="hljs-string">&quot;&quot;</span>).length();<br>        <br>        <span class="hljs-comment">// 定义10个桶</span><br>        List&lt;Integer&gt;[] buckets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            buckets[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        &#125;<br>        <br>        <span class="hljs-comment">// 经过k轮排序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = <span class="hljs-number">1</span>; k &lt; digitLength; k++, n *= <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-comment">// 每一轮都根据相应位上的数进行分桶</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">digit</span> <span class="hljs-operator">=</span> nums[i] / n % <span class="hljs-number">10</span>;<br>                buckets[digit].add(nums[i]);<br>            &#125;<br>            <span class="hljs-comment">// 按照桶的顺序依次取出数据，填入原始数组，完成一轮排序</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : buckets[i]) &#123;<br>                    nums[index++] = j;<br>                &#125;<br>                buckets[i].clear();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>technowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java各种数据类型的常用api</title>
    <link href="/2024/10/08/java-api/"/>
    <url>/2024/10/08/java-api/</url>
    
    <content type="html"><![CDATA[<div class="note note-secondary">            <p>本文总结了Java中常用的处理各种数据类型的内置api。</p>          </div><span id="more"></span><h2 id="数组array">数组Array</h2><ul><li>求长度 <code>nums.length</code></li><li>升序重排 <code>Arrays.sort(nums)</code></li><li>填充数组 <code>Arrays.fill(nums, val)</code></li><li>转化为字符串 <code>Arrays.toString(nums)</code></li><li>将多维数组转化为字符串 <code>Arrays.deepToString(nums)</code></li><li>转化为链表 <code>new LinkedList(Arrays.asList(nums))</code></li><li>字符串数组转化为字符串 <code>new String(chars)</code></li><li>判断数组元素相同 <code>Arrays.equals(nums1, nums2)</code></li></ul><h2 id="字符串string">字符串String</h2><ul><li>求长度 <code>str.length()</code></li><li>以<code>regex</code>分割字符串为数组<code>str.split(regex)</code></li><li>查找目标字符（串）（找不到返回-1） <code>str.indexOf(c)</code><code>str.lastIndexOf(c)</code> <code>str.indexOf(subStr)</code><code>str.lastIndexOf(subStr)</code></li><li>判断字符串相同 <code>strA.equals(strB)</code></li><li>比较字符串的字典序 <code>strA.compareTo(strB)</code></li><li>判断是否以目标前缀开头 <code>str.startsWith(prefix)</code></li><li>判断是否以目标后缀结尾 <code>str.endsWith(suffix)</code></li><li>去除首尾空格 <code>str.trim()</code></li><li>全小写 <code>str.toLowerCase()</code></li><li>全大写 <code>str.toUpperCase()</code></li><li>替换字符 <code>str.replace(oldChar, newChar)</code></li><li>替换字符串 <code>str.replace(oldRegex, newRegex)</code></li><li>获取从<code>[start, end - 1]</code>的子串<code>str.substring(start, end)</code></li><li>获取第i个字符 <code>str.charAt(i)</code></li><li>转化为字符数组 <code>str.toCharArray()</code></li><li>转化为StringBuilder <code>new StringBuilder(str)</code></li><li>转化为整数 <code>Integer.parseInt(str)</code><code>Integer.valueOf(str)</code></li><li>数字转化为字符串 <code>String.valueOf(num)</code></li></ul><h2 id="字符串stringbuilder">字符串StringBuilder</h2><ul><li>在末尾添加新字符（串） <code>sb.append(c)</code><code>sb.append(str)</code></li><li>删除第i个字符 <code>sb.deleteCharAt(i)</code></li><li>删除从<code>[start, end - 1]</code>的子串<code>sb.delete(start, end)</code></li><li>替换第i个字符 <code>sb.setCharAt(i, newChar)</code></li><li>替换从<code>[start, end - 1]</code>的子串<code>sb.replace(start, end, str)</code></li><li>在第i个字符之前插入字符串 <code>sb.insert(i, str)</code></li><li>反转字符串 <code>sb.reverse()</code></li><li>转化为String <code>sb.toString()</code></li></ul><h2 id="链表list">链表List</h2><ul><li>末尾添加元素 <code>list.add(element)</code></li><li>获取第i个位置的元素 <code>list.get(i)</code></li><li>替换第i个位置的元素 <code>list.set(i, newElement)</code></li><li>删除第i个位置的元素 <code>list.remove(i)</code></li><li>删除最后一个元素 <code>linkedList.removeLast()</code></li><li>求长度 <code>list.size()</code></li><li>判断是否为空 <code>list.isEmpty()</code></li><li>清空 <code>list.clear()</code></li><li>判断是否包含某元素 <code>list.contains(object)</code></li><li>查找元素（找不到返回-1） <code>list.indexOf(object)</code><code>list.lastIndexOf(object)</code></li><li>转化为集合 <code>new HashSet&lt;&gt;(list)</code></li><li>转化为整数数组<code>list.stream().mapToInt(x -&gt; x).toArray()</code><code>list.stream().mapToInt(Integer::intValue).toArray()</code></li><li>转化为字符串数组<code>(String[]) list.toArray(new String [0])</code></li></ul><h2 id="栈stack">栈Stack</h2><ul><li>压入栈顶 <code>stk.push(element)</code></li><li>从栈顶弹出 <code>stk.pop()</code></li><li>查看栈顶元素 <code>stk.peek()</code></li><li>求长度 <code>stk.size()</code></li><li>判断是否为空 <code>stk.isEmpty()</code><code>stk.empty()</code></li></ul><h2 id="单端队列queue">单端队列Queue</h2><ul><li>从队尾添加元素 失败会抛异常<code>queue.add(element)</code>失败会返回false<code>queue.offer(element)</code></li><li>从队头移除元素 空指针会抛异常<code>queue.remove()</code>空指针会返回null<code>queue.poll()</code></li><li>查看队头元素 空指针会抛异常<code>queue.element()</code>空指针会返回null<code>queue.peek()</code></li><li>求长度 <code>queue.size()</code></li><li>判断是否为空 <code>queue.isEmpty()</code></li><li>清空 <code>queue.clear()</code></li><li>判断是否包含某元素 <code>queue.contains(object)</code></li></ul><h2 id="双端队列deque">双端队列Deque</h2><ul><li>从队尾添加元素 失败会抛异常<code>deque.addLast(element)</code>失败会返回false<code>deque.offerLast(element)</code></li><li>从队头添加元素 失败会抛异常<code>deque.addFirst(element)</code><code>deque.push()</code>失败会返回false<code>deque.offerFirst(element)</code></li><li>从队尾删除元素 空指针会抛异常<code>deque.removeLast()</code>空指针会返回null<code>deque.pollLast()</code></li><li>从队头删除元素 空指针会抛异常<code>deque.removeFirst()</code><code>deque.pop()</code>空指针会返回null<code>deque.pollFirst()</code></li><li>查看队尾元素 空指针会抛异常<code>deque.getLast()</code>空指针会返回null<code>deque.peekLast()</code></li><li>查看队头元素 空指针会抛异常<code>deque.getFirst()</code>空指针会返回null<code>deque.peekFirst()</code></li><li>求长度 <code>deque.size()</code></li><li>判断是否为空 <code>deque.isEmpty()</code></li><li>清空 <code>deque.clear()</code></li></ul><h2 id="集合set">集合Set</h2><ul><li>添加元素 <code>set.add(element)</code></li><li>删除元素 <code>set.remove(element)</code></li><li>判断是否包含某元素 <code>set.contains(object)</code></li><li>求长度 <code>set.size()</code></li><li>清空 <code>set.clear()</code></li><li>获取不小于key的最小元素（空指针返回null）<code>treeSet.ceiling(key)</code></li><li>获取不大于key的最大元素（空指针返回null）<code>treeSet.floor(key)</code></li><li>获取第一个元素 <code>treeSet.first()</code></li><li>获取最后一个元素 <code>treeSet.last()</code></li><li>转化为整数数组<code>set.stream().mapToInt(x -&gt; x).toArray()</code></li></ul><h2 id="映射map">映射Map</h2><ul><li>添加或修改键值对 <code>map.put(key, val)</code></li><li>删除键值对 <code>map.remove(key)</code></li><li>获取指定键对应的值 <code>map.get(key)</code></li><li>获取指定键对应的值（如果不存在，则设定默认值）<code>map.getOrDefault(key, defaultVal)</code></li><li>判断是否包含某个键 <code>map.containsKey(key)</code></li><li>判断是否包含某个值 <code>map.containsValue(val)</code></li><li>判断是否为空 <code>map.isEmpty()</code></li><li>求长度 <code>map.size()</code></li><li>清空 <code>map.clear()</code></li><li>生成对应的键值对集合 <code>map.entrySet()</code></li><li>获取不小于key的最小元素（空指针返回null）<code>treeMap.ceilingEntry(key)</code></li><li>获取不大于key的最大元素（空指针返回null）<code>treeMap.floorEntry(key)</code></li><li>获取第一个键 <code>treeMap.firstKey()</code></li><li>获取最后一个键 <code>treeMap.lastKey()</code></li></ul><h2 id="键值对map.entry">键值对Map.Entry</h2><ul><li>获取键值对的键 <code>entry.getKey()</code></li><li>获取键值对的值 <code>entry.getValue()</code></li><li>修改键值对的值 <code>entry.setValue(val)</code></li></ul><h2 id="伪随机数生成器random">伪随机数生成器Random</h2><ul><li>生成一个随机整数 <code>rand.nextInt()</code></li><li>在<code>[0, bound)</code>之间生成一个随机整数<code>rand.nextInt(bound)</code></li><li>在<code>[0.0, 1.0)</code>之间生成一个随机浮点数<code>rand.nextDouble()</code></li><li>随机生成一个布尔值 <code>rand.nextBoolean()</code></li></ul><h2 id="数学math">数学Math</h2><ul><li>圆周率 <code>Math.PI</code></li><li>自然底数 <code>Math.E</code></li><li>计算绝对值 <code>Math.abs(num)</code></li><li>获取符号 <code>Math.signum(num)</code></li><li>获取两个同类型数值中的最大值 <code>Math.max(a, b)</code></li><li>获取两个同类型数值中的最小值 <code>Math.min(a, b)</code></li><li>浮点数向下取整（结果为浮点数） <code>Math.floor(num)</code></li><li>浮点数向上取整（结果为浮点数） <code>Math.ceil(num)</code></li><li>浮点数四舍五入取整（结果为整数） <code>Math.round(num)</code></li><li>浮点数四舍五入取整（结果为浮点数） <code>Math.rint(num)</code></li><li>计算x的n次幂（结果为浮点数） <code>Math.pow(x, n)</code></li><li>开平方（结果为浮点数） <code>Math.sqrt(x)</code></li><li>开立方（结果为浮点数） <code>Math.cbrt(x)</code></li><li>指数函数（结果为浮点数） <code>Math.exp(x)</code></li><li>自然对数（结果为浮点数） <code>Math.log(x)</code></li><li>常用对数（结果为浮点数） <code>Math.log10(x)</code></li><li>三角函数（弧度制，结果为浮点数）<code>Math.sin(x)</code>，<code>Math.cos(x)</code>，<code>Math.tan(x)</code></li><li>反三角函数（弧度制，结果为浮点数）<code>Math.asin(x)</code>，<code>Math.acos(x)</code>，<code>Math.atan(x)</code></li><li>角度值转化为弧度值（结果为浮点数）<code>Math.toRadians(deg)</code></li><li>弧度值转化为角度值（结果为浮点数）<code>Math.toDegrees(rad)</code></li><li>生成<code>[0.0, 1.0)</code>之间的一个随机浮点数<code>Math.random()</code></li></ul><h2 id="位整数包装类integer">32位整数包装类Integer</h2><table><thead><tr><th style="text-align: left;">用途</th><th style="text-align: left;">静态方法</th><th style="text-align: center;">实例方法</th></tr></thead><tbody><tr><td style="text-align: left;">10进制表示的字符串转换成基本类型整数</td><td style="text-align: left;"><code>Integer.parseInt(numStr)</code></td><td style="text-align: center;"></td></tr><tr><tdstyle="text-align: left;">任意进制表示的字符串转换成基本类型整数</td><tdstyle="text-align: left;"><code>Integer.parseInt(numStr, radix)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">10进制表示的字符串转换成整数对象</td><td style="text-align: left;"><code>Integer.valueOf(numStr)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">任意进制表示的字符串转换成整数对象</td><tdstyle="text-align: left;"><code>Integer.valueOf(numStr, radix)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">基本类型和包装类互相转换</td><tdstyle="text-align: left;"><code>Integer.valueOf(num)</code>（装箱）</td><td style="text-align: center;"><code>num.intValue()</code>（拆箱）</td></tr><tr><td style="text-align: left;">整数转化为2进制字符串（高位不补0）</td><tdstyle="text-align: left;"><code>Integer.toBinaryString(num)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">整数转化为8进制字符串</td><tdstyle="text-align: left;"><code>Integer.toOctalString(num)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">整数转化为16进制字符串</td><td style="text-align: left;"><code>Integer.toHexString(num)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">统计2进制表示中1的个数</td><td style="text-align: left;"><code>Integer.bitCount(num)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">整数转化为10进制表示的字符串</td><td style="text-align: left;"><code>Integer.toString(num)</code></td><td style="text-align: center;"><code>num.toString()</code></td></tr><tr><td style="text-align: left;">整数转化为任意进制表示的字符串</td><tdstyle="text-align: left;"><code>Integer.toString(num, radix)</code></td><td style="text-align: center;"></td></tr><tr><tdstyle="text-align: left;">比较两个基本类型整数或者整数对象的大小</td><td style="text-align: left;"><code>Integer.compare(a, b)</code></td><tdstyle="text-align: center;"><code>a.compareTo(b)</code>（实现了Comparable接口）</td></tr><tr><td style="text-align: left;">比较两个整数对象地址相同</td><td style="text-align: left;"></td><td style="text-align: center;"><code>a == b</code></td></tr><tr><td style="text-align: left;">比较两个整数对象值相等</td><td style="text-align: left;"></td><td style="text-align: center;"><code>a.equals(b)</code></td></tr></tbody></table><h2 id="双精度浮点数包装类double">双精度浮点数包装类Double</h2><table><thead><tr><th style="text-align: left;">用途</th><th style="text-align: left;">静态方法</th><th style="text-align: center;">实例方法</th></tr></thead><tbody><tr><td style="text-align: left;">字符串解析为基本类型浮点数</td><tdstyle="text-align: left;"><code>Double.parseDouble(numStr)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">字符串解析为浮点数对象</td><td style="text-align: left;"><code>Double.valueOf(numStr)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">基本类型和包装类型互相转换</td><tdstyle="text-align: left;"><code>Double.valueOf(num)</code>（装箱）</td><tdstyle="text-align: center;"><code>num.doubleValue()</code>（拆箱）</td></tr><tr><td style="text-align: left;">转换为字符串</td><td style="text-align: left;"><code>Double.toString(num)</code></td><td style="text-align: center;"><code>num.toString()</code></td></tr><tr><td style="text-align: left;">判断是否为NaN</td><td style="text-align: left;"><code>Double.isNaN(num)</code></td><td style="text-align: center;"><code>num.isNaN()</code></td></tr><tr><td style="text-align: left;">判断是否为正负无穷大</td><td style="text-align: left;"><code>Double.isInfinite(num)</code></td><td style="text-align: center;"><code>num.isInfinite()</code></td></tr><tr><tdstyle="text-align: left;">比较两个基本类型浮点数或浮点数对象的大小</td><td style="text-align: left;"><code>Double.compare(a, b)</code></td><td style="text-align: center;"><code>a.compareTo(b)</code>（实现了Comparable接口）</td></tr><tr><td style="text-align: left;">比较两个浮点数对象值相等</td><td style="text-align: left;"></td><td style="text-align: center;"><code>a.equals(b)</code></td></tr></tbody></table><h2 id="布尔值包装类boolean">布尔值包装类Boolean</h2><table><thead><tr><th style="text-align: left;">用途</th><th style="text-align: left;">静态方法</th><th style="text-align: center;">实例方法</th></tr></thead><tbody><tr><td style="text-align: left;">把字符串解析为基本布尔值</td><td style="text-align: left;"><code>Boolean.parseBoolean(boolStr)</code>（大小写不敏感）</td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">把字符串解析为布尔对象</td><td style="text-align: left;"><code>Boolean.valueOf(boolStr)</code>（大小写不敏感）</td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">基本类型装箱</td><td style="text-align: left;"><code>Boolean.valueOf(flag)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">包装类拆箱</td><tdstyle="text-align: left;"><code>Boolean.booleanValue(flag)</code></td><td style="text-align: center;"><code>flag.booleanValue()</code></td></tr><tr><td style="text-align: left;">转化为字符串</td><td style="text-align: left;"><code>Boolean.toString(flag)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">比较两个布尔对象相等</td><td style="text-align: left;"></td><td style="text-align: center;"><code>flag1.equals(flag2)</code></td></tr></tbody></table><h2 id="字符包装类character">字符包装类Character</h2><table><thead><tr><th style="text-align: left;">用途</th><th style="text-align: left;">静态方法</th><th style="text-align: center;">实例方法</th></tr></thead><tbody><tr><td style="text-align: left;">判断是否为字母</td><td style="text-align: left;"><code>Character.isLetter(ch)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">判断是否为数字</td><td style="text-align: left;"><code>Character.isDigit(ch)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">判断是否为字母或数字</td><tdstyle="text-align: left;"><code>Character.isLetterOrDigit(ch)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">判断是否为空白字符</td><td style="text-align: left;"><code>Character.isWhiteSpace(ch)</code>（注意：空白字符指的是空格<code></code>，换行符<code>\n</code>，水平制表符<code>\t</code>，回车符<code>\r</code>，垂直制表符<code>\u00B</code>，换页符<code>\f</code>这6个会移动光标并且在视觉上造成空白的控制字符）</td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">判断是否为大写字母</td><tdstyle="text-align: left;"><code>Character.isUpperCase(ch)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">判断是否为小写字母</td><tdstyle="text-align: left;"><code>Character.isLowerCase(ch)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">转换为大写字母</td><tdstyle="text-align: left;"><code>Character.toUpperCase(ch)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">转换为小写字母</td><tdstyle="text-align: left;"><code>Character.toLowerCase(ch)</code></td><td style="text-align: center;"></td></tr><tr><td style="text-align: left;">转换为字符串</td><td style="text-align: left;"><code>Character.toString(ch)</code></td><td style="text-align: center;"></td></tr><tr><tdstyle="text-align: left;">比较两个基本类型字符或者字符对象的ASCII码大小</td><tdstyle="text-align: left;"><code>Character.compare(ch1, ch2)</code></td><td style="text-align: center;"><code>ch1.compareTo(ch2)</code>（实现了Comparable接口）</td></tr><tr><td style="text-align: left;">比较两个字符对象值相等</td><td style="text-align: left;"></td><td style="text-align: center;"><code>ch1.equals(ch2)</code></td></tr></tbody></table><h2 id="高精度浮点数bigdecimal">高精度浮点数BigDecimal</h2><ul><li>字符串转化为高精度浮点数 <code>new BigDecimal(numStr)</code></li><li>浮点数转化为高精度浮点数 <code>BigDecimal.valueOf(num)</code></li><li>两个高精度浮点数相加 <code>a.add(b)</code></li><li>两个高精度浮点数相减 <code>a.subtract(b)</code></li><li>两个高精度浮点数相乘 <code>a.multiply(b)</code></li><li>两个高精度浮点数相除（会抛异常） <code>a.divide(b)</code></li><li>两个高精度浮点数相除（指定精度和舍入方式）<code>a.divide(b, scale, RoundingMode.HALF_UP)</code></li><li>按照小数位数四舍五入 <code>num.setScale(scale)</code></li><li>按照指定舍入方式保留小数 <code>num.setScale(scale, mode)</code></li><li>比较两个高精度浮点数的大小（不管小数位数）<code>a.compareTo(b)</code></li><li>比较两个高精度浮点数的值相同（包括小数位数）<code>a.equals(b)</code></li><li>获取两个高精度浮点数之间的较小/大值 <code>a.min(b)</code><code>a.max(b)</code></li></ul><h2 id="输入scanner">输入Scanner</h2><ul><li>读取下一个以空格或换行符分隔的字符串 <code>sc.next()</code></li><li>读取下一行 <code>sc.nextLine()</code></li><li>读取下一个整数 <code>sc.nextInt()</code></li><li>读取下一个浮点数 <code>sc.nextDouble()</code></li><li>读取下一个布尔值 <code>sc.nextBoolean()</code></li><li>判断是否还有后续输入 <code>sc.hasNext()</code></li><li>判断是否还有下一行 <code>sc.hasNextLine()</code></li><li>判断下一个输入是否为整数 <code>sc.hasNextInt()</code></li><li>判断下一个输入是否为浮点数 <code>sc.hasNextDouble()</code></li><li>判断下一个输入是否为布尔值 <code>sc.hasNextBoolean()</code></li></ul><h2 id="输出printstream">输出PrintStream</h2><ul><li>不换行输出 <code>out.print()</code></li><li>换行输出 <code>out.println()</code></li><li>格式化输出 <code>out.printf(formatStr, args)</code></li></ul><h2 id="迭代器iterator">迭代器Iterator</h2><ul><li>生成Java集合的迭代器 <code>collection.iterator()</code>（是一个<code>Iterator&lt;T&gt;</code>对象，其中T是collection的元素泛型）</li><li>判断是否还有下一个元素 <code>iter.hasNext()</code></li><li>获取下一个元素 <code>iter.next()</code></li></ul><h2 id="流stream">流Stream</h2><ul><li>从Java集合中获取流 <code>collection.stream()</code>（生成的是<code>Stream&lt;T&gt;</code>对象，其中T是集合元素的泛型）</li><li>筛选符合条件的元素 <code>filter()</code></li><li>把元素映射为另外的对象 <code>map()</code></li><li>扁平化嵌套结构 <code>flatMap()</code></li><li>排序 <code>sorted()</code></li><li>去重 <code>distinct()</code></li><li>截断 <code>limit(n)</code></li><li>跳过元素 <code>skip(n)</code></li><li>收集结果 <code>collect()</code></li><li>遍历元素 <code>forEach()</code></li><li>计数 <code>count()</code></li><li>聚合 <code>reduce()</code></li><li>查找第一个/任意一个满足要求的元素 <code>findFirst()</code>，<code>findAny()</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>technowledge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/07/hello-world/"/>
    <url>/2024/10/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
